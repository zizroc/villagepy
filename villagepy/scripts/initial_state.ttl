@prefix : <http://www.owl-ontologies.com/Ontology1172270693.owl#> .
@prefix ns1: <https://maya.com#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix p1: <http://www.owl-ontologies.com/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

p1:Ontology1172270693.owl a owl:Ontology ;
    owl:imports <http://swrl.stanford.edu/ontologies/built-ins/3.3/swrlx.owl>,
        <http://www.w3.org/2003/11/swrl>,
        <http://www.w3.org/2003/11/swrlb> .

:Adopted_Cousin a owl:Class ;
    rdfs:subClassOf :Adopted_Kin_Relation .

:Adopted_Uncle a owl:Class ;
    rdfs:subClassOf :Male_Adopted_Relation .

:Adoptive_Brother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Sibling :Male_Adopted_Relation ) ] .

:Adoptive_Daughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Child :Female_Adopted_Relation :Female_Relation ) ] .

:Adoptive_Father a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Parent :Male_Adopted_Relation ) ] .

:Adoptive_Granddaughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Grandchild :Female_Relation :Female_Adopted_Relation ) ] .

:Adoptive_Grandfather a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Grandparent :Male_Relation :Male_Adopted_Relation ) ] .

:Adoptive_Grandmother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Grandparent :Female_Adopted_Relation ) ] .

:Adoptive_Grandson a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Grandchild :Male_Relation :Male_Adopted_Relation ) ] .

:Adoptive_Mother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Parent :Female_Adopted_Relation ) ] .

:Adoptive_Sister a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Sibling :Female_Adopted_Relation ) ] .

:Adoptive_Son a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adoptive_Child :Male_Relation :Male_Adopted_Relation ) ] .

:Age_Unknown_1 a :Age_Unknown .

:Allergic_Disorder a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Alzheimers_Disease a owl:Class ;
    rdfs:comment "c/w Snomed CT term Alzheimer's Disease"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Anxiety a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Arthritis a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Arthropathy a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Aspergers_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term is Asperger's Disorder"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Asthma a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:At_Age_20_to_29_1 a :At_Age_20_to_29 .

:At_Age_30_to_39_1 a :At_Age_30_to_39 .

:At_Age_40_to_49_1 a :At_Age_40_to_49 .

:At_Age_50_to_59_1 a :At_Age_50_to_59 .

:At_Age_60_and_Older_1 a :At_Age_60_and_Older .

:Autistic_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Before_age_20_1 a :Before_age_20 .

:Benign_Neoplasm_of_Brain a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Bipolar_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Mental_Disorder .

:Blood_Clot a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Cardiac_Dysrhythmia a owl:Class ;
    rdfs:comment "Snomed CT concept"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Carpal_Tunnel_Syndrome a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Cerebrovascular_Accident a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Cholecystitis a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Classical_Phenylketonuria a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Coronary_Artery_Disease a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Coughing a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Sign_or_Symptom .

:Cyst_of_Breast a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Degeneration_of_Intervertebral_Disc a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Depressive_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Developmental_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term. Parent term for developmental mental disorder."^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Diabetes_Mellitus a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Disorder_of_Thyroid_Gland a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Eating_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Mental_Disorder .

:Endometriosis a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Female_Fictive_Kin a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Fictive_Kin_Relation ) ] .

:Female_Infertility a owl:Class ;
    rdfs:comment "Snomed  CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Female_Partner a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Partner_Relation ) ] .

:Foster_Brother a owl:Class ;
    rdfs:subClassOf :Male_Foster_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Sibling :Male_Relation ) ] .

:Foster_Daughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Child :Female_Foster_Relation ) ] .

:Foster_Father a owl:Class ;
    rdfs:subClassOf :Male_Foster_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Parent :Male_Relation ) ] .

:Foster_Granddaughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Foster_Relation :Foster_Grandchild ) ] .

:Foster_Grandfather a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Grandparent :Male_Foster_Relation ) ] .

:Foster_Grandmother a owl:Class ;
    rdfs:subClassOf :Female_Foster_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Foster_Grandparent ) ] .

:Foster_Grandson a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Grandchild :Male_Foster_Relation ) ] .

:Foster_Mother a owl:Class ;
    rdfs:subClassOf :Female_Foster_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Foster_Parent ) ] .

:Foster_Sister a owl:Class ;
    rdfs:subClassOf :Female_Foster_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Foster_Sibling ) ] .

:Foster_Son a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Child :Male_Foster_Relation ) ] .

:Fraternal_Twin_Brother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Fraternal_Twin_Sibling :Twin_Brother ) ] .

:Fraternal_Twin_Sister a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Twin_Sister :Fraternal_Twin_Sibling ) ] .

:Grand_Nephew a owl:Class ;
    rdfs:subClassOf :Male_Blood_Relation,
        :Third_Degree_Relation .

:Grand_Niece a owl:Class ;
    rdfs:subClassOf :Female_Blood_Relation,
        :Third_Degree_Relation .

:Granddaughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Grandchild :Female_Blood_Relation ) ] .

:Grandson a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Grandchild :Male_Blood_Relation ) ] .

:Great_Granddaughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Blood_Relation :Great_Grandchild ) ] .

:Great_Grandson a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Great_Grandchild :Male_Blood_Relation ) ] .

:Heart_Failure a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Heart_Murmur a owl:Class ;
    rdfs:comment "Snomed CT term, subsumed by clinical finding"^^xsd:string ;
    rdfs:subClassOf :Sign_or_Symptom .

:Heart_Valve_Disorder a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Hepatic_failure a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Hypercholesterolemia a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Hypertensive_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Identical_Twin_Brother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Identical_Twin_Sibling :Twin_Brother ) ] .

:Identical_Twin_Sister a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Identical_Twin_Sibling :Twin_Sister ) ] .

:In_Infancy_1 a :In_Infancy .

:Kidney_Disease a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Lactose_Intolerance a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Leukemia a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Lupus_erythematosus a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Male_Fictive_Kin a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Fictive_Kin_Relation :Male_Relation ) ] .

:Male_Partner a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Relation :Partner_Relation ) ] .

:Malignant_Melanoma a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Neoplasm_of_Breast_Bilateral a owl:Class ;
    rdfs:comment "Combination of 2 SNOMED CT terms: malignant neoplasm of breast AND bilateral"^^xsd:string ;
    rdfs:subClassOf :Malignant_Neoplasm_of_Breast .

:Malignant_Neoplasm_of_Liver a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Neoplasm_of_Ovary a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Neoplasm_of_Skin a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Neoplasm_of_Thyroid a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Neoplastic_Disease a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Tumor_of_Colon a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Tumor_of_Lung a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Tumor_of_Prostate a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_Tumor_of_Stomach a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Malignant_tumor_of_intestine a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Maternal_Aunt a owl:Class ;
    rdfs:subClassOf :Aunt .

:Maternal_Grandfather a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Maternal_Grandparent :Male_Blood_Relation ) ] .

:Maternal_Grandmother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Maternal_Grandparent :Female_Blood_Relation ) ] .

:Maternal_Uncle a owl:Class ;
    rdfs:subClassOf :Uncle .

:Maternal_female_cousin a owl:Class ;
    rdfs:subClassOf :Female_Cousin .

:Maternal_male_cousin a owl:Class ;
    rdfs:subClassOf :Male_Cousin .

:Maternal_maternal_grandaunt a owl:Class ;
    rdfs:subClassOf :Grand_Aunt .

:Maternal_maternal_granduncle a owl:Class ;
    rdfs:subClassOf :Grand_Uncle .

:Maternal_maternal_great_grandfather a owl:Class ;
    rdfs:subClassOf :Great_Grandfather .

:Maternal_maternal_great_grandmother a owl:Class ;
    rdfs:subClassOf :Great_Grandmother .

:Maternal_paternal_grandaunt a owl:Class ;
    rdfs:subClassOf :Grand_Aunt .

:Maternal_paternal_granduncle a owl:Class ;
    rdfs:subClassOf :Grand_Uncle .

:Maternal_paternal_great_grandfather a owl:Class ;
    rdfs:subClassOf :Great_Grandfather .

:Maternal_paternal_great_grandmother a owl:Class ;
    rdfs:subClassOf :Great_Grandmother .

:Meningitis a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Migraine a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Multiple_Sclerosis a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Myocardial_Infarction a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Natural_Father a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Blood_Relation :Natural_Parent ) ] .

:Natural_Mother a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Natural_Parent :Female_Blood_Relation ) ] .

:Neoplasm_of_Ear a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Neoplasm_of_Uterus a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Nephew a owl:Class ;
    rdfs:subClassOf :Male_Blood_Relation,
        :Second_Degree_Relation .

:Niece a owl:Class ;
    rdfs:subClassOf :Female_Blood_Relation,
        :Second_Degree_Relation .

:Non_Hodgkins_Lymphoma a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Organ_Donor a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:Organ_Recipient a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:Overweight_Or_Obesity a owl:Class ;
    rdfs:comment "combination of two Snomed CT terms, overweight (sign or symptom) and obesity (dx)"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Parkinsonism a owl:Class ;
    rdfs:comment "Snomed CT term."^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Paternal_Aunt a owl:Class ;
    rdfs:subClassOf :Aunt .

:Paternal_Grandfather a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Paternal_Grandparent :Male_Blood_Relation ) ] .

:Paternal_Grandmother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Paternal_Grandparent :Female_Blood_Relation ) ] .

:Paternal_Uncle a owl:Class ;
    rdfs:subClassOf :Uncle .

:Paternal_female_cousin a owl:Class ;
    rdfs:subClassOf :Female_Cousin .

:Paternal_male_cousin a owl:Class ;
    rdfs:subClassOf :Male_Cousin .

:Paternal_maternal_grandaunt a owl:Class ;
    rdfs:subClassOf :Grand_Aunt .

:Paternal_maternal_great_grandfather a owl:Class ;
    rdfs:subClassOf :Great_Grandfather .

:Paternal_maternal_great_grandmother a owl:Class ;
    rdfs:subClassOf :Great_Grandmother .

:Paternal_paternal_grandaunt a owl:Class ;
    rdfs:subClassOf :Grand_Aunt .

:Paternal_paternal_granduncle a owl:Class ;
    rdfs:subClassOf :Grand_Uncle .

:Paternal_paternal_great_grandfather a owl:Class ;
    rdfs:subClassOf :Great_Grandfather .

:Paternal_paternal_great_grandmother a owl:Class ;
    rdfs:subClassOf :Great_Grandmother .

:Polyp_of_Colon a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Prematurity_of_fetus a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Primary_Malignant_Neoplasm_of_Bone a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Renal_Failure_Syndrome a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Secondary_Malignant_Neoplasm_of_Bone a owl:Class ;
    rdfs:subClassOf :Diagnosis .

:Sedentary_Lifestyle a owl:Class ;
    rdfs:subClassOf :Health_Risk_Behavior .

:Step_Brother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Step_Relation :Step_Sibling ) ] .

:Step_Cousin a owl:Class ;
    rdfs:subClassOf :Step_Kin_Relation .

:Step_Daughter a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Step_Relation :Step_Child ) ] .

:Step_Father a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Step_Relation :Step_Parent ) ] .

:Step_Granddaughter a owl:Class ;
    rdfs:subClassOf :Female_Step_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Step_Grandchild ) ] .

:Step_Grandfather a owl:Class ;
    rdfs:subClassOf :Male_Step_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Relation :Step_Grandparent ) ] .

:Step_Grandmother a owl:Class ;
    rdfs:subClassOf :Female_Step_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Step_Grandparent ) ] .

:Step_Grandson a owl:Class ;
    rdfs:subClassOf :Male_Step_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Relation :Step_Grandchild ) ] .

:Step_Mother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Step_Relation :Step_Parent ) ] .

:Step_Sister a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Step_Relation :Step_Sibling ) ] .

:Step_Son a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Step_Relation :Step_Child ) ] .

:Substance_Abuse a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Tobacco_Smoking_Behavior a owl:Class ;
    rdfs:comment "Snomed CT terrm"^^xsd:string ;
    rdfs:subClassOf :Health_Risk_Behavior .

:Torsion_of_Spermatic_Cord a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Transplant_of_Kidney a owl:Class ;
    rdfs:comment "Snomed CT term, under Procedure hierarchy"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:def_has_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :f ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :m ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:ClassAtom ;
                                                    swrl:argument1 :b ;
                                                    swrl:classPredicate :Person_Male ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                            swrl:argument1 :a ;
                                                            swrl:argument2 :b ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_brother ] ;
            rdf:rest () ] .

:def_has_brother_2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_full_sibling ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_brother ] ;
            rdf:rest () ] .

:def_has_daughter1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_daughter ] ;
            rdf:rest () ] .

:def_has_daughter2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_daughter ] ;
            rdf:rest () ] .

:def_has_female_fictive_kin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_fictive_kin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :b ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_female_fictive_kin ] ;
            rdf:rest () ] .

:def_has_female_partner a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_partner ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :b ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_female_partner ] ;
            rdf:rest () ] .

:def_has_granddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandparent ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_granddaughter ] ;
            rdf:rest () ] .

:def_has_grandnephew1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_grandnephew ] ;
            rdf:rest () ] .

:def_has_grandnephew2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_grandnephew ] ;
            rdf:rest () ] .

:def_has_grandniece1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_grandniece ] ;
            rdf:rest () ] .

:def_has_grandniece2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_grandniece ] ;
            rdf:rest () ] .

:def_has_grandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandparent ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_grandson ] ;
            rdf:rest () ] .

:def_has_great_granddaughter2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_great_granddaughter ] ;
            rdf:rest () ] .

:def_has_great_grandson1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_great_grandson ] ;
            rdf:rest () ] .

:def_has_great_grandson2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_great_grandson ] ;
            rdf:rest () ] .

:def_has_greatgranddaughter1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_great_granddaughter ] ;
            rdf:rest () ] .

:def_has_half_brother1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :f ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :n ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                    swrl:argument1 :m ;
                                                    swrl:argument2 :n ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:ClassAtom ;
                                                            swrl:argument1 :b ;
                                                            swrl:classPredicate :Person_Male ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_brother ] ;
            rdf:rest () ] .

:def_has_half_brother2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :m ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                    swrl:argument1 :f ;
                                                    swrl:argument2 :d ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:ClassAtom ;
                                                            swrl:argument1 :b ;
                                                            swrl:classPredicate :Person_Male ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_brother ] ;
            rdf:rest () ] .

:def_has_half_nephew1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_half_nephew ] ;
            rdf:rest () ] .

:def_has_half_nephew2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_half_nephew ] ;
            rdf:rest () ] .

:def_has_half_niece1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_half_niece ] ;
            rdf:rest () ] .

:def_has_half_niece2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_half_niece ] ;
            rdf:rest () ] .

:def_has_half_sister1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :f ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :n ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                    swrl:argument1 :m ;
                                                    swrl:argument2 :n ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:ClassAtom ;
                                                            swrl:argument1 :b ;
                                                            swrl:classPredicate :Person_Female ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_sister ] ;
            rdf:rest () ] .

:def_has_half_sister2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :m ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                    swrl:argument1 :f ;
                                                    swrl:argument2 :d ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:ClassAtom ;
                                                            swrl:argument1 :b ;
                                                            swrl:classPredicate :Person_Female ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_sister ] ;
            rdf:rest () ] .

:def_has_male_fictive_kin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_fictive_kin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :b ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_male_fictive_kin ] ;
            rdf:rest () ] .

:def_has_male_partner a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_partner ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :b ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_male_partner ] ;
            rdf:rest () ] .

:def_has_maternal_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :m ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :m ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :s ;
                    swrl:propertyPredicate :has_maternal_aunt ] ;
            rdf:rest () ] .

:def_has_maternal_female_cousin1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_daughter ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_female_cousin ] ;
            rdf:rest () ] .

:def_has_maternal_female_cousin2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_daughter ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_female_cousin ] ;
            rdf:rest () ] .

:def_has_maternal_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_grandfather ] ;
            rdf:rest () ] .

:def_has_maternal_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_grandmother ] ;
            rdf:rest () ] .

:def_has_maternal_half_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :m ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :m ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :has_half_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :s ;
                    swrl:propertyPredicate :has_maternal_half_aunt ] ;
            rdf:rest () ] .

:def_has_maternal_half_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :m ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :m ;
                            swrl:argument2 :b ;
                            swrl:propertyPredicate :has_half_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_half_uncle ] ;
            rdf:rest () ] .

:def_has_maternal_male_cousin1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_son ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_male_cousin ] ;
            rdf:rest () ] .

:def_has_maternal_male_cousin2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_son ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_male_cousin ] ;
            rdf:rest () ] .

:def_has_maternal_maternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_maternal_grandaunt ] ;
            rdf:rest () ] .

:def_has_maternal_maternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_maternal_granduncle ] ;
            rdf:rest () ] .

:def_has_maternal_maternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_maternal_maternal_great_grandfather ] ;
            rdf:rest () ] .

:def_has_maternal_maternal_great_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_mother ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_maternal_maternal_great_grandmother ] ;
            rdf:rest () ] .

:def_has_maternal_paternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_paternal_grandaunt ] ;
            rdf:rest () ] .

:def_has_maternal_paternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_maternal_paternal_granduncle ] ;
            rdf:rest () ] .

:def_has_maternal_paternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_maternal_paternal_great_grandfather ] ;
            rdf:rest () ] .

:def_has_maternal_paternal_great_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_mother ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_maternal_paternal_great_grandmother ] ;
            rdf:rest () ] .

:def_has_maternal_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :f ;
                            swrl:argument2 :b ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_uncle ] ;
            rdf:rest () ] .

:def_has_nephew1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_nephew ] ;
            rdf:rest () ] .

:def_has_nephew2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_nephew ] ;
            rdf:rest () ] .

:def_has_niece1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_niece ] ;
            rdf:rest () ] .

:def_has_niece2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_niece ] ;
            rdf:rest () ] .

:def_has_paternal_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :f ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :s ;
                    swrl:propertyPredicate :has_paternal_aunt ] ;
            rdf:rest () ] .

:def_has_paternal_female_cousin1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_daughter ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_female_cousin ] ;
            rdf:rest () ] .

:def_has_paternal_female_cousin2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_daughter ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_female_cousin ] ;
            rdf:rest () ] .

:def_has_paternal_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_grandfather ] ;
            rdf:rest () ] .

:def_has_paternal_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_grandmother ] ;
            rdf:rest () ] .

:def_has_paternal_half_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_half_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_half_aunt ] ;
            rdf:rest () ] .

:def_has_paternal_half_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :f ;
                            swrl:argument2 :b ;
                            swrl:propertyPredicate :has_half_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_half_uncle ] ;
            rdf:rest () ] .

:def_has_paternal_male_cousin1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_son ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_male_cousin ] ;
            rdf:rest () ] .

:def_has_paternal_male_cousin2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_son ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_male_cousin ] ;
            rdf:rest () ] .

:def_has_paternal_maternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_maternal_grandaunt ] ;
            rdf:rest () ] .

:def_has_paternal_maternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_maternal_granduncle ] ;
            rdf:rest () ] .

:def_has_paternal_maternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_paternal_maternal_great_grandfather ] ;
            rdf:rest () ] .

:def_has_paternal_maternal_great_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_mother ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_paternal_maternal_great_grandmother ] ;
            rdf:rest () ] .

:def_has_paternal_paternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_paternal_grandaunt ] ;
            rdf:rest () ] .

:def_has_paternal_paternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_paternal_paternal_granduncle ] ;
            rdf:rest () ] .

:def_has_paternal_paternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_paternal_paternal_great_grandfather ] ;
            rdf:rest () ] .

:def_has_paternal_paternal_great_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_natural_father ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :c ;
                                    swrl:argument2 :d ;
                                    swrl:propertyPredicate :has_natural_mother ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :d ;
                    swrl:propertyPredicate :has_paternal_paternal_great_grandmother ] ;
            rdf:rest () ] .

:def_has_paternal_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :f ;
                            swrl:argument2 :b ;
                            swrl:propertyPredicate :has_natural_brother ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_uncle ] ;
            rdf:rest () ] .

:def_has_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :f ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :a ;
                            swrl:argument2 :m ;
                            swrl:propertyPredicate :has_natural_mother ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :b ;
                                    swrl:argument2 :f ;
                                    swrl:propertyPredicate :has_natural_father ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 :b ;
                                            swrl:argument2 :m ;
                                            swrl:propertyPredicate :has_natural_mother ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:ClassAtom ;
                                                    swrl:argument1 :b ;
                                                    swrl:classPredicate :Person_Female ] ;
                                            rdf:rest [ a swrl:AtomList ;
                                                    rdf:first [ a swrl:DifferentIndividualsAtom ;
                                                            swrl:argument1 :a ;
                                                            swrl:argument2 :b ] ;
                                                    rdf:rest () ] ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_sister ] ;
            rdf:rest () ] .

:def_has_sister_2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_full_sibling ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Female ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_sister ] ;
            rdf:rest () ] .

:def_has_son1 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_son ] ;
            rdf:rest () ] .

:def_has_son2 a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :a ;
                            swrl:classPredicate :Person_Male ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :b ;
                    swrl:argument2 :a ;
                    swrl:propertyPredicate :has_natural_son ] ;
            rdf:rest () ] .

:has_Status a owl:FunctionalProperty,
        owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Status .

:has_age_at_death a owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range :Age_Range .

:has_age_at_onset a owl:FunctionalProperty,
        owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Age_Range .

:has_age_at_resolution a owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Age_Range .

:has_current_age a owl:DatatypeProperty ;
    rdfs:domain :Person ;
    rdfs:range xsd:int .

:infer_famhx_adoptive_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_brother ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_cousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_cousin ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_daughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_daughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_daughter ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_father a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_father ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_granddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_granddaughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_granddaughter ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_grandmother ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_grandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_grandson ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_grandson ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_mother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_mother ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_sister ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_son a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_son ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_son ] ;
            rdf:rest () ] .

:infer_famhx_adoptive_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_adoptive_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_adoptive_uncle ] ;
            rdf:rest () ] .

:infer_famhx_female_fictive_kin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_female_fictive_kin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_female_fictive_kin ] ;
            rdf:rest () ] .

:infer_famhx_female_partner a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_female_partner ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_female_partner ] ;
            rdf:rest () ] .

:infer_famhx_foster_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_brother ] ;
            rdf:rest () ] .

:infer_famhx_foster_daughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_daughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_daughter ] ;
            rdf:rest () ] .

:infer_famhx_foster_father a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_father ] ;
            rdf:rest () ] .

:infer_famhx_foster_granddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_granddaughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_granddaughter ] ;
            rdf:rest () ] .

:infer_famhx_foster_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_foster_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_grandmother ] ;
            rdf:rest () ] .

:infer_famhx_foster_grandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_grandson ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_grandson ] ;
            rdf:rest () ] .

:infer_famhx_foster_mother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_mother ] ;
            rdf:rest () ] .

:infer_famhx_foster_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_sister ] ;
            rdf:rest () ] .

:infer_famhx_foster_son a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_foster_son ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_foster_son ] ;
            rdf:rest () ] .

:infer_famhx_fraternal_twin_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_fraternal_twin_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_fraternal_twin_brother ] ;
            rdf:rest () ] .

:infer_famhx_fraternal_twin_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_fraternal_twin_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_fraternal_twin_sister ] ;
            rdf:rest () ] .

:infer_famhx_granddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_granddaughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_granddaughter ] ;
            rdf:rest () ] .

:infer_famhx_grandnephew a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandnephew ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_grandnephew ] ;
            rdf:rest () ] .

:infer_famhx_grandniece a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandniece ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_grandniece ] ;
            rdf:rest () ] .

:infer_famhx_grandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_grandson ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_grandson ] ;
            rdf:rest () ] .

:infer_famhx_great_granddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_granddaughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_great_granddaughter ] ;
            rdf:rest () ] .

:infer_famhx_great_grandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_great_grandson ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_great_grandson ] ;
            rdf:rest () ] .

:infer_famhx_half_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_half_brother ] ;
            rdf:rest () ] .

:infer_famhx_half_nephew a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_nephew ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_half_nephew ] ;
            rdf:rest () ] .

:infer_famhx_half_niece a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_niece ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_half_niece ] ;
            rdf:rest () ] .

:infer_famhx_half_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_half_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_half_sister ] ;
            rdf:rest () ] .

:infer_famhx_identical_twin_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_identical_twin_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_identical_twin_brother ] ;
            rdf:rest () ] .

:infer_famhx_identical_twin_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_identical_twin_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_identical_twin_sister ] ;
            rdf:rest () ] .

:infer_famhx_in_maternal_female_cousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_female_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_female_cousin ] ;
            rdf:rest () ] .

:infer_famhx_male_fictive_kin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_male_fictive_kin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_male_fictive_kin ] ;
            rdf:rest () ] .

:infer_famhx_male_partner a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_male_partner ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_male_partner ] ;
            rdf:rest () ] .

:infer_famhx_maternal_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_aunt ] ;
            rdf:rest () ] .

:infer_famhx_maternal_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_maternal_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_grandmother ] ;
            rdf:rest () ] .

:infer_famhx_maternal_half_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_half_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_half_aunt ] ;
            rdf:rest () ] .

:infer_famhx_maternal_half_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_half_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_half_uncle ] ;
            rdf:rest () ] .

:infer_famhx_maternal_male_cousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_male_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_male_cousin ] ;
            rdf:rest () ] .

:infer_famhx_maternal_maternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_maternal_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_maternal_grandaunt ] ;
            rdf:rest () ] .

:infer_famhx_maternal_maternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_maternal_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_maternal_granduncle ] ;
            rdf:rest () ] .

:infer_famhx_maternal_maternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_maternal_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_maternal_great_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_maternal_paternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_paternal_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_paternal_grandaunt ] ;
            rdf:rest () ] .

:infer_famhx_maternal_paternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_paternal_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_paternal_granduncle ] ;
            rdf:rest () ] .

:infer_famhx_maternal_paternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_paternal_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_paternal_great_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_maternal_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_maternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_maternal_uncle ] ;
            rdf:rest () ] .

:infer_famhx_natural_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_brother ] ;
            rdf:rest () ] .

:infer_famhx_natural_daughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_daughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_daughter ] ;
            rdf:rest () ] .

:infer_famhx_natural_father a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_father ] ;
            rdf:rest () ] .

:infer_famhx_natural_mother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_mother ] ;
            rdf:rest () ] .

:infer_famhx_natural_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_sister ] ;
            rdf:rest () ] .

:infer_famhx_natural_son a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_natural_son ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_natural_son ] ;
            rdf:rest () ] .

:infer_famhx_nephew a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_nephew ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_nephew ] ;
            rdf:rest () ] .

:infer_famhx_niece a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_niece ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_niece ] ;
            rdf:rest () ] .

:infer_famhx_organ_donor a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_organ_donor ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_organ_donor ] ;
            rdf:rest () ] .

:infer_famhx_organ_recipient a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_organ_recipient ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_organ_recipient ] ;
            rdf:rest () ] .

:infer_famhx_paternal_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_aunt ] ;
            rdf:rest () ] .

:infer_famhx_paternal_female_cousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_female_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_female_cousin ] ;
            rdf:rest () ] .

:infer_famhx_paternal_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_paternal_grandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_grandmother ] ;
            rdf:rest () ] .

:infer_famhx_paternal_half_aunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_half_aunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_half_aunt ] ;
            rdf:rest () ] .

:infer_famhx_paternal_half_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_half_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_half_uncle ] ;
            rdf:rest () ] .

:infer_famhx_paternal_male_cousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_male_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_male_cousin ] ;
            rdf:rest () ] .

:infer_famhx_paternal_maternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_maternal_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_maternal_grandaunt ] ;
            rdf:rest () ] .

:infer_famhx_paternal_maternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_maternal_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_maternal_granduncle ] ;
            rdf:rest () ] .

:infer_famhx_paternal_maternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_maternal_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_maternal_great_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_paternal_paternal_grandaunt a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_paternal_grandaunt ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_paternal_grandaunt ] ;
            rdf:rest () ] .

:infer_famhx_paternal_paternal_granduncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_paternal_granduncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_paternal_granduncle ] ;
            rdf:rest () ] .

:infer_famhx_paternal_paternal_great_grandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_paternal_great_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_paternal_great_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_paternal_uncle a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_paternal_uncle ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_paternal_uncle ] ;
            rdf:rest () ] .

:infer_famhx_step_brother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_brother ] ;
            rdf:rest () ] .

:infer_famhx_step_daughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_daughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_stepdaughter ] ;
            rdf:rest () ] .

:infer_famhx_step_father a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_father ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_stepfather ] ;
            rdf:rest () ] .

:infer_famhx_step_mother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_mother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_stepmother ] ;
            rdf:rest () ] .

:infer_famhx_step_sister a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_sister ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_sister ] ;
            rdf:rest () ] .

:infer_famhx_step_son a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_son ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_stepson ] ;
            rdf:rest () ] .

:infer_famhx_stepcousin a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_cousin ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_cousin ] ;
            rdf:rest () ] .

:infer_famhx_stepgranddaughter a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_granddaughter ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_granddaughter ] ;
            rdf:rest () ] .

:infer_famhx_stepgrandfather a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_grandfather ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_grandfather ] ;
            rdf:rest () ] .

:infer_famhx_stepgrandmother a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_grandmother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_grandmother ] ;
            rdf:rest () ] .

:infer_famhx_stepgrandson a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :b ;
                    swrl:propertyPredicate :has_step_grandson ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :b ;
                            swrl:argument2 :c ;
                            swrl:propertyPredicate :has_health_state ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :a ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_fam_hx_in_step_grandson ] ;
            rdf:rest () ] .

:negative_1 a :Negative .

:paternal_maternal_granduncle a owl:Class ;
    rdfs:subClassOf :Grand_Uncle .

:positive_1 a :Positive .

:positive_but_resolved_1 a :Positive_but_Resolved .

:unknown_1 a :Unknown .

swrl:argument2 a owl:ObjectProperty .

<winik/137> a :Person_Male ;
    :has_natural_father <winik/35> ;
    :has_natural_mother <winik/48> ;
    ns1:hasAge 6472 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/138> a :Person_Male ;
    :has_natural_father <winik/35> ;
    :has_natural_mother <winik/48> ;
    ns1:hasAge 5650 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/143> a :Person_Male ;
    :has_natural_father <winik/37> ;
    :has_natural_mother <winik/50> ;
    ns1:hasAge 10916 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/150> a :Person_Male ;
    :has_natural_father <winik/38> ;
    :has_natural_mother <winik/51> ;
    ns1:hasAge 7680 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/152> a :Person_Male ;
    :has_natural_father <winik/39> ;
    :has_natural_mother <winik/52> ;
    ns1:hasAge 7926 ;
    ns1:hasFamily <family/M> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "M" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/153> a :Person_Male ;
    :has_natural_father <winik/39> ;
    :has_natural_mother <winik/52> ;
    ns1:hasAge 7050 ;
    ns1:hasFamily <family/M> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "M" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/154> a :Person_Male ;
    :has_natural_father <winik/39> ;
    :has_natural_mother <winik/52> ;
    ns1:hasAge 6221 ;
    ns1:hasFamily <family/M> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "M" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/155> a :Person_Male ;
    :has_natural_father <winik/57> ;
    :has_natural_mother <winik/53> ;
    ns1:hasAge 2547 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/156> a :Person_Male ;
    :has_natural_father <winik/57> ;
    :has_natural_mother <winik/53> ;
    ns1:hasAge 1970 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/157> a :Person_Female ;
    :has_natural_father <winik/57> ;
    :has_natural_mother <winik/53> ;
    ns1:hasAge 1099 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/158> a :Person_Male ;
    :has_natural_father <winik/57> ;
    :has_natural_mother <winik/53> ;
    ns1:hasAge 164 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/159> a :Person_Female ;
    :has_natural_father <winik/58> ;
    :has_natural_mother <winik/54> ;
    ns1:hasAge 1283 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/160> a :Person_Female ;
    :has_natural_father <winik/58> ;
    :has_natural_mother <winik/54> ;
    ns1:hasAge 618 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/161> a :Person_Male ;
    :has_natural_father <winik/62> ;
    :has_natural_mother <winik/55> ;
    ns1:hasAge 852 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/162> a :Person_Male ;
    :has_natural_father <winik/60> ;
    :has_natural_mother <winik/56> ;
    ns1:hasAge 3895 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/163> a :Person_Female ;
    :has_natural_father <winik/60> ;
    :has_natural_mother <winik/56> ;
    ns1:hasAge 2848 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/164> a :Person_Female ;
    :has_natural_father <winik/60> ;
    :has_natural_mother <winik/56> ;
    ns1:hasAge 1879 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/165> a :Person_Female ;
    :has_natural_father <winik/60> ;
    :has_natural_mother <winik/56> ;
    ns1:hasAge 1204 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/166> a :Person_Female ;
    :has_natural_father <winik/60> ;
    :has_natural_mother <winik/56> ;
    ns1:hasAge 691 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/167> a :Person_Female ;
    :has_natural_father <winik/69> ;
    :has_natural_mother <winik/59> ;
    ns1:hasAge 1837 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/168> a :Person_Female ;
    :has_natural_father <winik/69> ;
    :has_natural_mother <winik/59> ;
    ns1:hasAge 1230 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/169> a :Person_Male ;
    :has_natural_father <winik/69> ;
    :has_natural_mother <winik/59> ;
    ns1:hasAge 718 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/170> a :Person_Male ;
    :has_natural_father <winik/68> ;
    :has_natural_mother <winik/61> ;
    ns1:hasAge 2222 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/171> a :Person_Female ;
    :has_natural_father <winik/68> ;
    :has_natural_mother <winik/61> ;
    ns1:hasAge 1407 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/172> a :Person_Male ;
    :has_natural_father <winik/68> ;
    :has_natural_mother <winik/61> ;
    ns1:hasAge 933 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/173> a :Person_Female ;
    :has_natural_father <winik/68> ;
    :has_natural_mother <winik/61> ;
    ns1:hasAge 203 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/174> a :Person_Male ;
    :has_natural_father <winik/71> ;
    :has_natural_mother <winik/65> ;
    ns1:hasAge 3187 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/175> a :Person_Female ;
    :has_natural_father <winik/71> ;
    :has_natural_mother <winik/65> ;
    ns1:hasAge 2651 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/176> a :Person_Female ;
    :has_natural_father <winik/71> ;
    :has_natural_mother <winik/65> ;
    ns1:hasAge 1741 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/177> a :Person_Female ;
    :has_natural_father <winik/71> ;
    :has_natural_mother <winik/65> ;
    ns1:hasAge 701 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/178> a :Person_Female ;
    :has_natural_father <winik/72> ;
    :has_natural_mother <winik/66> ;
    ns1:hasAge 2794 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/179> a :Person_Female ;
    :has_natural_father <winik/72> ;
    :has_natural_mother <winik/66> ;
    ns1:hasAge 1951 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/180> a :Person_Female ;
    :has_natural_father <winik/72> ;
    :has_natural_mother <winik/66> ;
    ns1:hasAge 1086 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/181> a :Person_Male ;
    :has_natural_father <winik/72> ;
    :has_natural_mother <winik/66> ;
    ns1:hasAge 330 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/182> a :Person_Male ;
    :has_natural_father <winik/78> ;
    :has_natural_mother <winik/67> ;
    ns1:hasAge 1208 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/183> a :Person_Female ;
    :has_natural_father <winik/78> ;
    :has_natural_mother <winik/67> ;
    ns1:hasAge 268 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/184> a :Person_Male ;
    :has_natural_father <winik/85> ;
    :has_natural_mother <winik/70> ;
    ns1:hasAge 1188 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/185> a :Person_Male ;
    :has_natural_father <winik/85> ;
    :has_natural_mother <winik/70> ;
    ns1:hasAge 105 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/186> a :Person_Female ;
    :has_natural_father <winik/92> ;
    :has_natural_mother <winik/73> ;
    ns1:hasAge 1459 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/187> a :Person_Male ;
    :has_natural_father <winik/92> ;
    :has_natural_mother <winik/73> ;
    ns1:hasAge 498 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/188> a :Person_Male ;
    :has_natural_father <winik/80> ;
    :has_natural_mother <winik/75> ;
    ns1:hasAge 4375 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/189> a :Person_Male ;
    :has_natural_father <winik/80> ;
    :has_natural_mother <winik/75> ;
    ns1:hasAge 3441 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/190> a :Person_Female ;
    :has_natural_father <winik/80> ;
    :has_natural_mother <winik/75> ;
    ns1:hasAge 2345 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/191> a :Person_Female ;
    :has_natural_father <winik/80> ;
    :has_natural_mother <winik/75> ;
    ns1:hasAge 1314 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/192> a :Person_Male ;
    :has_natural_father <winik/80> ;
    :has_natural_mother <winik/75> ;
    ns1:hasAge 563 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/193> a :Person_Male ;
    :has_natural_father <winik/83> ;
    :has_natural_mother <winik/76> ;
    ns1:hasAge 3690 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/194> a :Person_Male ;
    :has_natural_father <winik/83> ;
    :has_natural_mother <winik/76> ;
    ns1:hasAge 2751 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/195> a :Person_Female ;
    :has_natural_father <winik/83> ;
    :has_natural_mother <winik/76> ;
    ns1:hasAge 2251 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/196> a :Person_Female ;
    :has_natural_father <winik/83> ;
    :has_natural_mother <winik/76> ;
    ns1:hasAge 1418 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/197> a :Person_Male ;
    :has_natural_father <winik/83> ;
    :has_natural_mother <winik/76> ;
    ns1:hasAge 893 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/198> a :Person_Male ;
    :has_natural_father <winik/95> ;
    :has_natural_mother <winik/77> ;
    ns1:hasAge 1999 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/199> a :Person_Male ;
    :has_natural_father <winik/95> ;
    :has_natural_mother <winik/77> ;
    ns1:hasAge 1383 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/200> a :Person_Female ;
    :has_natural_father <winik/95> ;
    :has_natural_mother <winik/77> ;
    ns1:hasAge 458 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/201> a :Person_Female ;
    :has_natural_father <winik/95> ;
    :has_natural_mother <winik/77> ;
    ns1:hasAge 54 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/202> a :Person_Male ;
    :has_natural_father <winik/94> ;
    :has_natural_mother <winik/79> ;
    ns1:hasAge 595 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/203> a :Person_Female ;
    :has_natural_father <winik/88> ;
    :has_natural_mother <winik/81> ;
    ns1:hasAge 3252 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/204> a :Person_Female ;
    :has_natural_father <winik/88> ;
    :has_natural_mother <winik/81> ;
    ns1:hasAge 2160 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/205> a :Person_Male ;
    :has_natural_father <winik/88> ;
    :has_natural_mother <winik/81> ;
    ns1:hasAge 1577 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/206> a :Person_Female ;
    :has_natural_father <winik/88> ;
    :has_natural_mother <winik/81> ;
    ns1:hasAge 769 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/207> a :Person_Male ;
    :has_natural_father <winik/88> ;
    :has_natural_mother <winik/81> ;
    ns1:hasAge 23 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/208> a :Person_Female ;
    :has_natural_father <winik/96> ;
    :has_natural_mother <winik/82> ;
    ns1:hasAge 1730 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/209> a :Person_Female ;
    :has_natural_father <winik/96> ;
    :has_natural_mother <winik/82> ;
    ns1:hasAge 1097 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/210> a :Person_Female ;
    :has_natural_father <winik/96> ;
    :has_natural_mother <winik/82> ;
    ns1:hasAge 174 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/211> a :Person_Male ;
    :has_natural_father <winik/100> ;
    :has_natural_mother <winik/84> ;
    ns1:hasAge 2240 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/212> a :Person_Female ;
    :has_natural_father <winik/100> ;
    :has_natural_mother <winik/84> ;
    ns1:hasAge 1553 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/213> a :Person_Female ;
    :has_natural_father <winik/100> ;
    :has_natural_mother <winik/84> ;
    ns1:hasAge 735 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/214> a :Person_Male ;
    :has_natural_father <winik/97> ;
    :has_natural_mother <winik/86> ;
    ns1:hasAge 1445 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/215> a :Person_Male ;
    :has_natural_father <winik/97> ;
    :has_natural_mother <winik/86> ;
    ns1:hasAge 774 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/216> a :Person_Male ;
    :has_natural_father <winik/99> ;
    :has_natural_mother <winik/87> ;
    ns1:hasAge 715 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/217> a :Person_Female ;
    :has_natural_father <winik/99> ;
    :has_natural_mother <winik/87> ;
    ns1:hasAge 49 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/218> a :Person_Female ;
    :has_natural_father <winik/103> ;
    :has_natural_mother <winik/89> ;
    ns1:hasAge 3631 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/219> a :Person_Female ;
    :has_natural_father <winik/103> ;
    :has_natural_mother <winik/89> ;
    ns1:hasAge 2888 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/220> a :Person_Male ;
    :has_natural_father <winik/103> ;
    :has_natural_mother <winik/89> ;
    ns1:hasAge 1869 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/221> a :Person_Female ;
    :has_natural_father <winik/103> ;
    :has_natural_mother <winik/89> ;
    ns1:hasAge 1048 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/222> a :Person_Female ;
    :has_natural_father <winik/103> ;
    :has_natural_mother <winik/89> ;
    ns1:hasAge 300 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/223> a :Person_Female ;
    :has_natural_father <winik/102> ;
    :has_natural_mother <winik/90> ;
    ns1:hasAge 2390 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/224> a :Person_Male ;
    :has_natural_father <winik/102> ;
    :has_natural_mother <winik/90> ;
    ns1:hasAge 1525 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/225> a :Person_Female ;
    :has_natural_father <winik/102> ;
    :has_natural_mother <winik/90> ;
    ns1:hasAge 592 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/226> a :Person_Female ;
    :has_natural_father <winik/108> ;
    :has_natural_mother <winik/91> ;
    ns1:hasAge 2823 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/227> a :Person_Female ;
    :has_natural_father <winik/108> ;
    :has_natural_mother <winik/91> ;
    ns1:hasAge 2354 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/228> a :Person_Female ;
    :has_natural_father <winik/108> ;
    :has_natural_mother <winik/91> ;
    ns1:hasAge 1587 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/229> a :Person_Female ;
    :has_natural_father <winik/108> ;
    :has_natural_mother <winik/91> ;
    ns1:hasAge 507 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/230> a :Person_Male ;
    :has_natural_father <winik/108> ;
    :has_natural_mother <winik/91> ;
    ns1:hasAge 46 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/231> a :Person_Female ;
    :has_natural_father <winik/110> ;
    :has_natural_mother <winik/93> ;
    ns1:hasAge 1660 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/232> a :Person_Female ;
    :has_natural_father <winik/110> ;
    :has_natural_mother <winik/93> ;
    ns1:hasAge 837 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/233> a :Person_Female ;
    :has_natural_father <winik/110> ;
    :has_natural_mother <winik/93> ;
    ns1:hasAge 52 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/234> a :Person_Male ;
    :has_natural_father <winik/112> ;
    :has_natural_mother <winik/101> ;
    ns1:hasAge 1634 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/235> a :Person_Female ;
    :has_natural_father <winik/112> ;
    :has_natural_mother <winik/101> ;
    ns1:hasAge 1079 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/236> a :Person_Female ;
    :has_natural_father <winik/112> ;
    :has_natural_mother <winik/101> ;
    ns1:hasAge 139 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/237> a :Person_Female ;
    :has_natural_father <winik/115> ;
    :has_natural_mother <winik/104> ;
    ns1:hasAge 2386 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/238> a :Person_Male ;
    :has_natural_father <winik/115> ;
    :has_natural_mother <winik/104> ;
    ns1:hasAge 1967 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/239> a :Person_Male ;
    :has_natural_father <winik/115> ;
    :has_natural_mother <winik/104> ;
    ns1:hasAge 864 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/240> a :Person_Male ;
    :has_natural_father <winik/115> ;
    :has_natural_mother <winik/104> ;
    ns1:hasAge 36 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/241> a :Person_Female ;
    :has_natural_father <winik/116> ;
    :has_natural_mother <winik/105> ;
    ns1:hasAge 1442 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/242> a :Person_Female ;
    :has_natural_father <winik/116> ;
    :has_natural_mother <winik/105> ;
    ns1:hasAge 770 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/243> a :Person_Male ;
    :has_natural_father <winik/116> ;
    :has_natural_mother <winik/105> ;
    ns1:hasAge 185 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/244> a :Person_Male ;
    :has_natural_father <winik/114> ;
    :has_natural_mother <winik/106> ;
    ns1:hasAge 3872 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/245> a :Person_Female ;
    :has_natural_father <winik/114> ;
    :has_natural_mother <winik/106> ;
    ns1:hasAge 3040 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/246> a :Person_Female ;
    :has_natural_father <winik/114> ;
    :has_natural_mother <winik/106> ;
    ns1:hasAge 2146 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/247> a :Person_Female ;
    :has_natural_father <winik/114> ;
    :has_natural_mother <winik/106> ;
    ns1:hasAge 1167 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/248> a :Person_Male ;
    :has_natural_father <winik/114> ;
    :has_natural_mother <winik/106> ;
    ns1:hasAge 237 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/249> a :Person_Male ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 3705 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/250> a :Person_Male ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 2966 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/251> a :Person_Female ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 2284 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/252> a :Person_Female ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 1792 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/253> a :Person_Male ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 992 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/254> a :Person_Male ;
    :has_natural_father <winik/120> ;
    :has_natural_mother <winik/107> ;
    ns1:hasAge 542 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/255> a :Person_Female ;
    :has_natural_father <winik/122> ;
    :has_natural_mother <winik/109> ;
    ns1:hasAge 2642 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/256> a :Person_Female ;
    :has_natural_father <winik/122> ;
    :has_natural_mother <winik/109> ;
    ns1:hasAge 1889 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/257> a :Person_Male ;
    :has_natural_father <winik/122> ;
    :has_natural_mother <winik/109> ;
    ns1:hasAge 1166 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/258> a :Person_Male ;
    :has_natural_father <winik/122> ;
    :has_natural_mother <winik/109> ;
    ns1:hasAge 104 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/259> a :Person_Male ;
    :has_natural_father <winik/121> ;
    :has_natural_mother <winik/111> ;
    ns1:hasAge 3409 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/260> a :Person_Female ;
    :has_natural_father <winik/121> ;
    :has_natural_mother <winik/111> ;
    ns1:hasAge 2711 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/261> a :Person_Female ;
    :has_natural_father <winik/121> ;
    :has_natural_mother <winik/111> ;
    ns1:hasAge 2093 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/262> a :Person_Female ;
    :has_natural_father <winik/121> ;
    :has_natural_mother <winik/111> ;
    ns1:hasAge 1138 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/263> a :Person_Male ;
    :has_natural_father <winik/121> ;
    :has_natural_mother <winik/111> ;
    ns1:hasAge 260 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/264> a :Person_Female ;
    :has_natural_father <winik/123> ;
    :has_natural_mother <winik/113> ;
    ns1:hasAge 1537 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/265> a :Person_Female ;
    :has_natural_father <winik/123> ;
    :has_natural_mother <winik/113> ;
    ns1:hasAge 524 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/266> a :Person_Female ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 4124 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/267> a :Person_Female ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 3573 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/268> a :Person_Male ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 3054 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/269> a :Person_Male ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 2275 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/270> a :Person_Male ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 1559 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/271> a :Person_Female ;
    :has_natural_father <winik/130> ;
    :has_natural_mother <winik/117> ;
    ns1:hasAge 504 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/272> a :Person_Female ;
    :has_natural_father <winik/134> ;
    :has_natural_mother <winik/118> ;
    ns1:hasAge 3469 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/273> a :Person_Male ;
    :has_natural_father <winik/134> ;
    :has_natural_mother <winik/118> ;
    ns1:hasAge 2794 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/274> a :Person_Female ;
    :has_natural_father <winik/134> ;
    :has_natural_mother <winik/118> ;
    ns1:hasAge 2158 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/275> a :Person_Female ;
    :has_natural_father <winik/134> ;
    :has_natural_mother <winik/118> ;
    ns1:hasAge 1621 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/276> a :Person_Male ;
    :has_natural_father <winik/134> ;
    :has_natural_mother <winik/118> ;
    ns1:hasAge 939 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/277> a :Person_Female ;
    :has_natural_father <winik/127> ;
    :has_natural_mother <winik/119> ;
    ns1:hasAge 3848 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/278> a :Person_Male ;
    :has_natural_father <winik/127> ;
    :has_natural_mother <winik/119> ;
    ns1:hasAge 3323 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/279> a :Person_Female ;
    :has_natural_father <winik/127> ;
    :has_natural_mother <winik/119> ;
    ns1:hasAge 2424 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/280> a :Person_Female ;
    :has_natural_father <winik/127> ;
    :has_natural_mother <winik/119> ;
    ns1:hasAge 1746 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/281> a :Person_Female ;
    :has_natural_father <winik/127> ;
    :has_natural_mother <winik/119> ;
    ns1:hasAge 664 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/282> a :Person_Male ;
    :has_natural_father <winik/133> ;
    :has_natural_mother <winik/124> ;
    ns1:hasAge 1855 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/283> a :Person_Male ;
    :has_natural_father <winik/133> ;
    :has_natural_mother <winik/124> ;
    ns1:hasAge 1169 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/284> a :Person_Male ;
    :has_natural_father <winik/133> ;
    :has_natural_mother <winik/124> ;
    ns1:hasAge 200 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/285> a :Person_Female ;
    :has_natural_father <winik/136> ;
    :has_natural_mother <winik/125> ;
    ns1:hasAge 1177 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/286> a :Person_Female ;
    :has_natural_father <winik/136> ;
    :has_natural_mother <winik/125> ;
    ns1:hasAge 165 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/287> a :Person_Female ;
    :has_natural_father <winik/139> ;
    :has_natural_mother <winik/126> ;
    ns1:hasAge 3507 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/288> a :Person_Female ;
    :has_natural_father <winik/139> ;
    :has_natural_mother <winik/126> ;
    ns1:hasAge 2681 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/289> a :Person_Male ;
    :has_natural_father <winik/139> ;
    :has_natural_mother <winik/126> ;
    ns1:hasAge 2055 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/290> a :Person_Male ;
    :has_natural_father <winik/139> ;
    :has_natural_mother <winik/126> ;
    ns1:hasAge 1168 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/291> a :Person_Female ;
    :has_natural_father <winik/139> ;
    :has_natural_mother <winik/126> ;
    ns1:hasAge 397 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/292> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 4598 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/293> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 3818 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/294> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 2897 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/295> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 2287 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/296> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 1761 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/297> a :Person_Male ;
    :has_natural_father <winik/140> ;
    :has_natural_mother <winik/129> ;
    ns1:hasAge 1204 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/298> a :Person_Male ;
    :has_natural_father <winik/141> ;
    :has_natural_mother <winik/131> ;
    ns1:hasAge 2229 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/299> a :Person_Male ;
    :has_natural_father <winik/141> ;
    :has_natural_mother <winik/131> ;
    ns1:hasAge 1198 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/300> a :Person_Female ;
    :has_natural_father <winik/141> ;
    :has_natural_mother <winik/131> ;
    ns1:hasAge 255 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/301> a :Person_Female ;
    :has_natural_father <winik/142> ;
    :has_natural_mother <winik/132> ;
    ns1:hasAge 2348 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/302> a :Person_Female ;
    :has_natural_father <winik/142> ;
    :has_natural_mother <winik/132> ;
    ns1:hasAge 1703 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/303> a :Person_Male ;
    :has_natural_father <winik/142> ;
    :has_natural_mother <winik/132> ;
    ns1:hasAge 1018 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/304> a :Person_Female ;
    :has_natural_father <winik/142> ;
    :has_natural_mother <winik/132> ;
    ns1:hasAge 142 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/305> a :Person_Male ;
    :has_natural_father <winik/146> ;
    :has_natural_mother <winik/135> ;
    ns1:hasAge 1789 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/306> a :Person_Male ;
    :has_natural_father <winik/146> ;
    :has_natural_mother <winik/135> ;
    ns1:hasAge 994 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/307> a :Person_Male ;
    :has_natural_father <winik/146> ;
    :has_natural_mother <winik/135> ;
    ns1:hasAge 530 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/308> a :Person_Female ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 3726 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/309> a :Person_Male ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 3211 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/310> a :Person_Male ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 2789 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/311> a :Person_Male ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 1885 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/312> a :Person_Male ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 1045 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/313> a :Person_Male ;
    :has_natural_father <winik/147> ;
    :has_natural_mother <winik/144> ;
    ns1:hasAge 480 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/314> a :Person_Female ;
    :has_natural_father <winik/148> ;
    :has_natural_mother <winik/145> ;
    ns1:hasAge 3083 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/315> a :Person_Female ;
    :has_natural_father <winik/148> ;
    :has_natural_mother <winik/145> ;
    ns1:hasAge 2492 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/316> a :Person_Male ;
    :has_natural_father <winik/148> ;
    :has_natural_mother <winik/145> ;
    ns1:hasAge 1572 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/317> a :Person_Male ;
    :has_natural_father <winik/148> ;
    :has_natural_mother <winik/145> ;
    ns1:hasAge 655 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/318> a :Person_Female ;
    :has_natural_father <winik/149> ;
    :has_natural_mother <winik/151> ;
    ns1:hasAge 2959 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/319> a :Person_Female ;
    :has_natural_father <winik/149> ;
    :has_natural_mother <winik/151> ;
    ns1:hasAge 2069 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/320> a :Person_Female ;
    :has_natural_father <winik/149> ;
    :has_natural_mother <winik/151> ;
    ns1:hasAge 1006 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/321> a :Person_Male ;
    :has_natural_father <winik/149> ;
    :has_natural_mother <winik/151> ;
    ns1:hasAge 277 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "cc" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasProfession "none" ;
    ns1:isAlive true .

<winik/64> a :Person_Male ;
    :has_natural_father <winik/3> ;
    :has_natural_mother <winik/16> ;
    ns1:hasAge 5350 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

:Age_Unknown a owl:Class ;
    rdfs:subClassOf :Age_Range .

:At_Age_20_to_29 a owl:Class ;
    rdfs:subClassOf :Age_Range .

:At_Age_30_to_39 a owl:Class ;
    rdfs:subClassOf :Age_Range .

:At_Age_40_to_49 a owl:Class ;
    rdfs:subClassOf :Age_Range .

:At_Age_50_to_59 a owl:Class ;
    rdfs:subClassOf :Age_Range .

:At_Age_60_and_Older a owl:Class ;
    rdfs:subClassOf :Age_Range .

:Before_age_20 a owl:Class ;
    rdfs:subClassOf :Age_Range .

:Half_Brother a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Half_Sister ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Half_Sibling :Male_Blood_Relation ) ] .

:Half_Sister a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Half_Brother ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Blood_Relation :Half_Sibling ) ] .

:In_Infancy a owl:Class ;
    rdfs:subClassOf :Age_Range .

:Malignant_Neoplasm_of_Breast a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Natural_Daughter a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Natural_Son ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Blood_Relation :Natural_Child ) ] .

:Natural_Son a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Natural_Daughter ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Natural_Child :Male_Blood_Relation ) ] .

:cause_of_death_belongs_to_whom a owl:FunctionalProperty,
        owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Person ;
    owl:inverseOf :has_cause_of_death .

:fam_hx_in_adoptive_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_brother .

:fam_hx_in_adoptive_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_cousin .

:fam_hx_in_adoptive_daughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_daughter .

:fam_hx_in_adoptive_father_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_father .

:fam_hx_in_adoptive_granddaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_granddaughter .

:fam_hx_in_adoptive_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_grandfather .

:fam_hx_in_adoptive_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_grandmother .

:fam_hx_in_adoptive_grandson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_grandson .

:fam_hx_in_adoptive_mother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_mother .

:fam_hx_in_adoptive_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_sister .

:fam_hx_in_adoptive_son_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_son .

:fam_hx_in_adoptive_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_uncle .

:fam_hx_in_female_fictive_kin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_fictive_kin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_female_fictive_kin .

:fam_hx_in_female_partner_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_partner_belongs_to ;
    owl:inverseOf :has_fam_hx_in_female_partner .

:fam_hx_in_foster_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_brother .

:fam_hx_in_foster_daughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_daughter .

:fam_hx_in_foster_father_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_father .

:fam_hx_in_foster_granddaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_granddaughter .

:fam_hx_in_foster_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_grandfather .

:fam_hx_in_foster_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_grandmother .

:fam_hx_in_foster_grandson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_grandson .

:fam_hx_in_foster_mother_belong_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_mother .

:fam_hx_in_foster_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_sister .

:fam_hx_in_foster_son_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_son .

:fam_hx_in_fraternal_twin_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_twin_brother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_fraternal_twin_brother .

:fam_hx_in_fraternal_twin_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_twin_sister_belongs_to ;
    owl:inverseOf :has_fam_hx_in_fraternal_twin_sister .

:fam_hx_in_granddaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_granddaughter .

:fam_hx_in_grandnephew_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandnephew .

:fam_hx_in_grandniece_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandniece .

:fam_hx_in_grandson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandson .

:fam_hx_in_great_granddaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_granddaughter .

:fam_hx_in_great_grandson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_grandson .

:fam_hx_in_half_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_brother .

:fam_hx_in_half_nephew_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_nephew .

:fam_hx_in_half_niece_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_niece .

:fam_hx_in_half_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_sister .

:fam_hx_in_identical_twin_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_twin_brother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_identical_twin_brother .

:fam_hx_in_identical_twin_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_twin_sister_belongs_to ;
    owl:inverseOf :has_fam_hx_in_identical_twin_sister .

:fam_hx_in_male_fictive_kin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_fictive_kin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_male_fictive_kin .

:fam_hx_in_male_partner_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_partner_belongs_to ;
    owl:inverseOf :has_fam_hx_in_male_partner .

:fam_hx_in_maternal_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_aunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_aunt .

:fam_hx_in_maternal_female_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_maternal_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_female_cousin .

:fam_hx_in_maternal_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_maternal_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_grandfather .

:fam_hx_in_maternal_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_maternal_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_grandmother .

:fam_hx_in_maternal_half_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_aunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_half_aunt .

:fam_hx_in_maternal_half_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_uncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_half_uncle .

:fam_hx_in_maternal_male_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_maternal_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_male_cousin .

:fam_hx_in_maternal_maternal_grandaunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandaunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_maternal_grandaunt .

:fam_hx_in_maternal_maternal_granduncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_granduncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_maternal_granduncle .

:fam_hx_in_maternal_maternal_great_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandfather_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_maternal_great_grandfather .

:fam_hx_in_maternal_maternal_great_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandmother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_maternal_great_grandmother .

:fam_hx_in_maternal_paternal_grandaunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandaunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_paternal_grandaunt .

:fam_hx_in_maternal_paternal_granduncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_granduncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_paternal_granduncle .

:fam_hx_in_maternal_paternal_great_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandfather_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_paternal_great_grandfather .

:fam_hx_in_maternal_paternal_great_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandmother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_paternal_great_grandmother .

:fam_hx_in_maternal_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_uncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_uncle .

:fam_hx_in_natural_daughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_daughter .

:fam_hx_in_natural_father_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_father .

:fam_hx_in_natural_mother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_parent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_mother .

:fam_hx_in_natural_son_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_child_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_son .

:fam_hx_in_nephew_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_nephew .

:fam_hx_in_niece_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_niece .

:fam_hx_in_organ_donor_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_organ_donor .

:fam_hx_in_organ_recipient_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_organ_recipient .

:fam_hx_in_paternal_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_aunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_aunt .

:fam_hx_in_paternal_female_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_paternal_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_female_cousin .

:fam_hx_in_paternal_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_paternal_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_grandfather .

:fam_hx_in_paternal_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_paternal_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_grandmother .

:fam_hx_in_paternal_half_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_aunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_half_aunt .

:fam_hx_in_paternal_half_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_half_uncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_half_uncle .

:fam_hx_in_paternal_male_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_paternal_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_male_cousin .

:fam_hx_in_paternal_maternal_grandaunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandaunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_maternal_grandaunt .

:fam_hx_in_paternal_maternal_granduncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_granduncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_maternal_granduncle .

:fam_hx_in_paternal_maternal_great_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandfather_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_maternal_great_grandfather .

:fam_hx_in_paternal_maternal_great_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandmother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_maternal_great_grandmother .

:fam_hx_in_paternal_paternal_grandaunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandaunt_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_paternal_grandaunt .

:fam_hx_in_paternal_paternal_granduncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_granduncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_paternal_granduncle .

:fam_hx_in_paternal_paternal_great_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandfather_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_paternal_great_grandfather .

:fam_hx_in_paternal_paternal_great_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandmother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_paternal_great_grandmother .

:fam_hx_in_paternal_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_uncle_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_uncle .

:fam_hx_in_step_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_brother .

:fam_hx_in_step_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_cousin .

:fam_hx_in_step_granddaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_granddaughter .

:fam_hx_in_step_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_grandfather .

:fam_hx_in_step_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_grandmother .

:fam_hx_in_step_grandson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_grandchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_grandson .

:fam_hx_in_step_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_sister .

:fam_hx_in_stepdaughter_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_stepchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_stepdaughter .

:fam_hx_in_stepfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_stepparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_stepfather .

:fam_hx_in_stepmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_stepparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_stepmother .

:fam_hx_in_stepson_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_stepchild_belongs_to ;
    owl:inverseOf :has_fam_hx_in_stepson .

:has_adoptive_brother a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_sibling .

:has_adoptive_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_adoptive_daughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_adoptive_child .

:has_adoptive_father a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_parent .

:has_adoptive_granddaughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_adoptive_grandchild .

:has_adoptive_grandfather a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_grandparent .

:has_adoptive_grandmother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_adoptive_grandparent .

:has_adoptive_grandson a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_grandchild .

:has_adoptive_mother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_adoptive_parent .

:has_adoptive_sister a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_adoptive_sibling .

:has_adoptive_son a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_child .

:has_adoptive_uncle a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_cause_of_death a owl:InverseFunctionalProperty,
        owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range :Health_State ;
    owl:inverseOf :cause_of_death_belongs_to_whom ;
    owl:versionInfo "TODO: "^^xsd:string .

:has_fam_hx_in_maternal_maternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandmother ;
    owl:inverseOf :fam_hx_in_maternal_maternal_great_grandmother_belongs_to .

:has_fam_hx_in_maternal_paternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandmother ;
    owl:inverseOf :fam_hx_in_maternal_paternal_great_grandmother_belongs_to .

:has_fam_hx_in_paternal_maternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandmother ;
    owl:inverseOf :fam_hx_in_paternal_maternal_great_grandmother_belongs_to .

:has_fam_hx_in_paternal_paternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandmother ;
    owl:inverseOf :fam_hx_in_paternal_paternal_great_grandmother_belongs_to .

:has_foster_brother a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_foster_sibling .

:has_foster_daughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_foster_child .

:has_foster_father a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_foster_parent .

:has_foster_granddaughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_foster_grandchild .

:has_foster_grandfather a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_foster_grandparent .

:has_foster_grandmother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_foster_grandparent .

:has_foster_grandson a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_foster_grandchild .

:has_foster_mother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_foster_parent .

:has_foster_sister a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_foster_sibling .

:has_foster_son a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_foster_child .

:has_maternal_maternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandmother .

:has_maternal_paternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandmother .

:has_paternal_maternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandmother .

:has_paternal_paternal_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandmother .

:has_step_brother a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_step_sibling .

:has_step_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_family_member .

:has_step_daughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_step_child .

:has_step_father a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_step_parent .

:has_step_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_grandchild .

:has_step_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_grandparent .

:has_step_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_grandparent .

:has_step_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_grandchild .

:has_step_mother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_step_parent .

:has_step_sister a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_step_sibling .

:has_step_son a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_step_child .

:health_state_belongs_to_whom a owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Person ;
    owl:inverseOf :has_health_state .

<resource/1> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/10> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/100> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/101> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/102> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/103> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/104> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/105> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/106> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/107> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/108> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/109> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/11> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/110> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/111> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/112> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/113> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/114> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/115> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/116> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/117> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/118> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/119> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/12> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/120> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/121> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/122> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/123> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/124> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/125> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/126> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/127> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/128> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/129> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/13> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/130> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/14> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/15> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/16> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/17> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/18> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/19> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/2> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/20> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/21> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/22> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/23> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/24> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/25> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/26> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/27> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/28> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/29> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/3> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/30> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/31> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/32> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/33> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/34> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/35> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/36> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/37> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/38> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/39> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/4> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/40> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/41> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/42> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/43> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/44> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/45> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/46> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/47> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/48> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/49> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/5> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/50> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/51> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/52> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/53> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/54> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/55> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/56> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/57> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/58> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/59> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/6> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/60> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/61> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/62> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/63> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/64> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/65> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/66> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/67> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/68> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/69> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/7> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/70> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/71> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/72> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/73> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/74> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/75> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/76> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/77> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/78> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/79> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/8> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/80> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/81> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/82> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/83> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/84> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/85> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/86> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/87> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/88> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/89> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/9> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/90> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/91> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/92> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/93> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/94> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<resource/95> a ns1:Resource ;
    ns1:hasName "marine-c" ;
    ns1:hasQuantity 100 .

<resource/96> a ns1:Resource ;
    ns1:hasName "coast" ;
    ns1:hasQuantity 100 .

<resource/97> a ns1:Resource ;
    ns1:hasName "garden" ;
    ns1:hasQuantity 100 .

<resource/98> a ns1:Resource ;
    ns1:hasName "marine" ;
    ns1:hasQuantity 100 .

<resource/99> a ns1:Resource ;
    ns1:hasName "marine-b" ;
    ns1:hasQuantity 100 .

<winik/128> a :Person_Male ;
    :has_natural_father <winik/33> ;
    :has_natural_mother <winik/46> ;
    ns1:hasAge 7524 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasPartner <winik/98> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/63> a :Person_Female ;
    :has_natural_father <winik/3> ;
    :has_natural_mother <winik/16> ;
    ns1:hasAge 6461 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasPartner <winik/74> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/74> a :Person_Male ;
    :has_natural_father <winik/6> ;
    :has_natural_mother <winik/19> ;
    ns1:hasAge 7243 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasPartner <winik/63> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/98> a :Person_Female ;
    :has_natural_father <winik/12> ;
    :has_natural_mother <winik/25> ;
    ns1:hasAge 6724 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/128> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<family/a> a ns1:Family ;
    ns1:hasResource <resource/100>,
        <resource/96>,
        <resource/97>,
        <resource/98>,
        <resource/99> .

<family/d> a ns1:Family ;
    ns1:hasResource <resource/16>,
        <resource/17>,
        <resource/18>,
        <resource/19>,
        <resource/20> .

:Adoptive_Child a owl:Class ;
    rdfs:subClassOf :Adopted_Kin_Relation .

:Adoptive_Grandchild a owl:Class ;
    rdfs:subClassOf :Adopted_Kin_Relation .

:Adoptive_Grandparent a owl:Class ;
    rdfs:subClassOf :Adopted_Kin_Relation .

:Adoptive_Parent a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adopted_Kin_Relation :Parent_Relation ) ] .

:Adoptive_Sibling a owl:Class ;
    rdfs:subClassOf :Adopted_Kin_Relation .

:Aunt a owl:Class ;
    rdfs:subClassOf :Female_Blood_Relation,
        :Second_Degree_Relation .

:Cousin a owl:Class ;
    rdfs:subClassOf :Third_Degree_Relation .

:Female_Cousin a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Cousin :Female_Blood_Relation ) ] .

:Fictive_Kin_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:Foster_Child a owl:Class ;
    rdfs:subClassOf :Foster_Kin_Relation .

:Foster_Grandchild a owl:Class ;
    rdfs:subClassOf :Foster_Kin_Relation .

:Foster_Grandparent a owl:Class ;
    rdfs:subClassOf :Foster_Kin_Relation .

:Foster_Parent a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Foster_Kin_Relation :Parent_Relation ) ] .

:Foster_Sibling a owl:Class ;
    rdfs:subClassOf :Foster_Kin_Relation .

:Grandchild a owl:Class ;
    rdfs:subClassOf :Second_Degree_Relation .

:Grandparent a owl:Class ;
    rdfs:subClassOf :Second_Degree_Relation .

:Great_Grandchild a owl:Class ;
    rdfs:subClassOf :Third_Degree_Relation .

:Great_Grandparent a owl:Class ;
    rdfs:subClassOf :Third_Degree_Relation .

:Half_Sibling a owl:Class ;
    rdfs:comment """consistent with GeneTests definition of second degree relative
Snomed CT term, but Snomed places under first degree blood relative"""^^xsd:string ;
    rdfs:subClassOf :Second_Degree_Relation .

:Male_Cousin a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Cousin :Male_Blood_Relation ) ] .

:Maternal_Grandparent a owl:Class ;
    rdfs:subClassOf :Grandparent .

:Mental_Disorder a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Diagnosis .

:Natural_Brother a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Natural_Sister ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Blood_Relation :Natural_Full_Sibling ) ] .

:Natural_Child a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :First_Degree_Relation .

:Natural_Parent a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :First_Degree_Relation :Parent_Relation ) ] .

:Natural_Sister a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Natural_Brother ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Blood_Relation :Natural_Full_Sibling ) ] .

:Partner_Relation a owl:Class ;
    rdfs:comment "Consistent with Snomed CT term Partner In Relationship."^^xsd:string ;
    rdfs:subClassOf :Family_Relation .

:Paternal_Grandparent a owl:Class ;
    rdfs:subClassOf :Grandparent .

:Step_Child a owl:Class ;
    rdfs:subClassOf :Step_Kin_Relation .

:Step_Grandchild a owl:Class ;
    rdfs:subClassOf :Step_Kin_Relation .

:Step_Grandparent a owl:Class ;
    rdfs:subClassOf :Step_Kin_Relation .

:Step_Parent a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Parent_Relation :Step_Kin_Relation ) ] .

:Step_Sibling a owl:Class ;
    rdfs:subClassOf :Step_Kin_Relation .

:Uncle a owl:Class ;
    rdfs:subClassOf :Male_Blood_Relation,
        :Second_Degree_Relation .

:fam_hx_in_natural_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_full_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_brother .

:fam_hx_in_natural_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_full_sibling_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_sister .

:has_adoptive_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_adoptive_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_adoptive_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_adoptive_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_adoptive_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_adoptive_family_member .

:has_cousin a owl:ObjectProperty ;
    rdfs:range :Person ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_fam_hx_in_adoptive_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_sibling ;
    owl:inverseOf :fam_hx_in_adoptive_brother_belongs_to .

:has_fam_hx_in_adoptive_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_cousin_belongs_to .

:has_fam_hx_in_adoptive_daughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_child ;
    owl:inverseOf :fam_hx_in_adoptive_daughter_belongs_to .

:has_fam_hx_in_adoptive_father a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_parent ;
    owl:inverseOf :fam_hx_in_adoptive_father_belongs_to .

:has_fam_hx_in_adoptive_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_grandchild ;
    owl:inverseOf :fam_hx_in_adoptive_granddaughter_belongs_to .

:has_fam_hx_in_adoptive_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_grandparent ;
    owl:inverseOf :fam_hx_in_adoptive_grandfather_belongs_to .

:has_fam_hx_in_adoptive_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_grandparent ;
    owl:inverseOf :fam_hx_in_adoptive_grandmother_belongs_to .

:has_fam_hx_in_adoptive_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_grandchild ;
    owl:inverseOf :fam_hx_in_adoptive_grandson_belongs_to .

:has_fam_hx_in_adoptive_mother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_parent ;
    owl:inverseOf :fam_hx_in_adoptive_mother_belongs_to .

:has_fam_hx_in_adoptive_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_sibling ;
    owl:inverseOf :fam_hx_in_adoptive_sister_belongs_to .

:has_fam_hx_in_adoptive_son a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_child ;
    owl:inverseOf :fam_hx_in_adoptive_son_belongs_to .

:has_fam_hx_in_adoptive_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_uncle_belongs_to .

:has_fam_hx_in_female_fictive_kin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_fictive_kin ;
    owl:inverseOf :fam_hx_in_female_fictive_kin_belongs_to .

:has_fam_hx_in_female_partner a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_partner ;
    owl:inverseOf :fam_hx_in_female_partner_belongs_to .

:has_fam_hx_in_foster_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_sibling ;
    owl:inverseOf :fam_hx_in_foster_brother_belongs_to .

:has_fam_hx_in_foster_daughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_child ;
    owl:inverseOf :fam_hx_in_foster_daughter_belongs_to .

:has_fam_hx_in_foster_father a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_parent ;
    owl:inverseOf :fam_hx_in_foster_father_belongs_to .

:has_fam_hx_in_foster_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_grandchild ;
    owl:inverseOf :fam_hx_in_foster_granddaughter_belongs_to .

:has_fam_hx_in_foster_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_grandparent ;
    owl:inverseOf :fam_hx_in_foster_grandfather_belongs_to .

:has_fam_hx_in_foster_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_grandparent ;
    owl:inverseOf :fam_hx_in_foster_grandmother_belongs_to .

:has_fam_hx_in_foster_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_grandchild ;
    owl:inverseOf :fam_hx_in_foster_grandson_belongs_to .

:has_fam_hx_in_foster_mother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_parent ;
    owl:inverseOf :fam_hx_in_foster_mother_belong_to .

:has_fam_hx_in_foster_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_sibling ;
    owl:inverseOf :fam_hx_in_foster_sister_belongs_to .

:has_fam_hx_in_foster_son a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_child ;
    owl:inverseOf :fam_hx_in_foster_son_belongs_to .

:has_fam_hx_in_fraternal_twin_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_twin_brother ;
    owl:inverseOf :fam_hx_in_fraternal_twin_brother_belongs_to .

:has_fam_hx_in_fraternal_twin_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_twin_sister ;
    owl:inverseOf :fam_hx_in_fraternal_twin_sister_belongs_to .

:has_fam_hx_in_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandchild ;
    owl:inverseOf :fam_hx_in_granddaughter_belongs_to .

:has_fam_hx_in_grandnephew a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_grandnephew_belongs_to .

:has_fam_hx_in_grandniece a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_grandniece_belongs_to .

:has_fam_hx_in_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandchild ;
    owl:inverseOf :fam_hx_in_grandson_belongs_to .

:has_fam_hx_in_great_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandchild ;
    owl:inverseOf :fam_hx_in_great_granddaughter_belongs_to .

:has_fam_hx_in_great_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandchild ;
    owl:inverseOf :fam_hx_in_great_grandson_belongs_to .

:has_fam_hx_in_half_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_sibling ;
    owl:inverseOf :fam_hx_in_half_brother_belongs_to .

:has_fam_hx_in_half_nephew a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_half_nephew_belongs_to .

:has_fam_hx_in_half_niece a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_half_niece_belongs_to .

:has_fam_hx_in_half_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_sibling ;
    owl:inverseOf :fam_hx_in_half_sister_belongs_to .

:has_fam_hx_in_identical_twin_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_twin_brother ;
    owl:inverseOf :fam_hx_in_identical_twin_brother_belongs_to .

:has_fam_hx_in_identical_twin_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_twin_sister ;
    owl:inverseOf :fam_hx_in_identical_twin_sister_belongs_to .

:has_fam_hx_in_male_fictive_kin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_fictive_kin ;
    owl:inverseOf :fam_hx_in_male_fictive_kin_belongs_to .

:has_fam_hx_in_male_partner a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_partner ;
    owl:inverseOf :fam_hx_in_male_partner_belongs_to .

:has_fam_hx_in_maternal_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_aunt ;
    owl:inverseOf :fam_hx_in_maternal_aunt_belongs_to .

:has_fam_hx_in_maternal_female_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_maternal_cousin ;
    owl:inverseOf :fam_hx_in_maternal_female_cousin_belongs_to .

:has_fam_hx_in_maternal_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_maternal_grandparent ;
    owl:inverseOf :fam_hx_in_maternal_grandfather_belongs_to .

:has_fam_hx_in_maternal_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_maternal_grandparent ;
    owl:inverseOf :fam_hx_in_maternal_grandmother_belongs_to .

:has_fam_hx_in_maternal_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_aunt ;
    owl:inverseOf :fam_hx_in_maternal_half_aunt_belongs_to .

:has_fam_hx_in_maternal_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_uncle ;
    owl:inverseOf :fam_hx_in_maternal_half_uncle_belongs_to .

:has_fam_hx_in_maternal_male_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_maternal_cousin ;
    owl:inverseOf :fam_hx_in_maternal_male_cousin_belongs_to .

:has_fam_hx_in_maternal_maternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandaunt ;
    owl:inverseOf :fam_hx_in_maternal_maternal_grandaunt_belongs_to .

:has_fam_hx_in_maternal_maternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_granduncle ;
    owl:inverseOf :fam_hx_in_maternal_maternal_granduncle_belongs_to .

:has_fam_hx_in_maternal_maternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandfather ;
    owl:inverseOf :fam_hx_in_maternal_maternal_great_grandfather_belongs_to .

:has_fam_hx_in_maternal_paternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandaunt ;
    owl:inverseOf :fam_hx_in_maternal_paternal_grandaunt_belongs_to .

:has_fam_hx_in_maternal_paternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_granduncle ;
    owl:inverseOf :fam_hx_in_maternal_paternal_granduncle_belongs_to .

:has_fam_hx_in_maternal_paternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandfather ;
    owl:inverseOf :fam_hx_in_maternal_paternal_great_grandfather_belongs_to .

:has_fam_hx_in_maternal_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_uncle ;
    owl:inverseOf :fam_hx_in_maternal_uncle_belongs_to .

:has_fam_hx_in_natural_daughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_child ;
    owl:inverseOf :fam_hx_in_natural_daughter_belongs_to .

:has_fam_hx_in_natural_father a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_parent ;
    owl:inverseOf :fam_hx_in_natural_father_belongs_to .

:has_fam_hx_in_natural_mother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_parent ;
    owl:inverseOf :fam_hx_in_natural_mother_belongs_to .

:has_fam_hx_in_natural_son a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_child ;
    owl:inverseOf :fam_hx_in_natural_son_belongs_to .

:has_fam_hx_in_nephew a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_nephew_belongs_to .

:has_fam_hx_in_niece a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_niece_belongs_to .

:has_fam_hx_in_organ_donor a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_organ_donor_belongs_to .

:has_fam_hx_in_organ_recipient a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_organ_recipient_belongs_to .

:has_fam_hx_in_paternal_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_aunt ;
    owl:inverseOf :fam_hx_in_paternal_aunt_belongs_to .

:has_fam_hx_in_paternal_female_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_paternal_cousin ;
    owl:inverseOf :fam_hx_in_paternal_female_cousin_belongs_to .

:has_fam_hx_in_paternal_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_paternal_grandparent ;
    owl:inverseOf :fam_hx_in_paternal_grandfather_belongs_to .

:has_fam_hx_in_paternal_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_paternal_grandparent ;
    owl:inverseOf :fam_hx_in_paternal_grandmother_belongs_to .

:has_fam_hx_in_paternal_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_aunt ;
    owl:inverseOf :fam_hx_in_paternal_half_aunt_belongs_to .

:has_fam_hx_in_paternal_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_half_uncle ;
    owl:inverseOf :fam_hx_in_paternal_half_uncle_belongs_to .

:has_fam_hx_in_paternal_male_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_paternal_cousin ;
    owl:inverseOf :fam_hx_in_paternal_male_cousin_belongs_to .

:has_fam_hx_in_paternal_maternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandaunt ;
    owl:inverseOf :fam_hx_in_paternal_maternal_grandaunt_belongs_to .

:has_fam_hx_in_paternal_maternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_granduncle ;
    owl:inverseOf :fam_hx_in_paternal_maternal_granduncle_belongs_to .

:has_fam_hx_in_paternal_maternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandfather ;
    owl:inverseOf :fam_hx_in_paternal_maternal_great_grandfather_belongs_to .

:has_fam_hx_in_paternal_paternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandaunt ;
    owl:inverseOf :fam_hx_in_paternal_paternal_grandaunt_belongs_to .

:has_fam_hx_in_paternal_paternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_granduncle ;
    owl:inverseOf :fam_hx_in_paternal_paternal_granduncle_belongs_to .

:has_fam_hx_in_paternal_paternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandfather ;
    owl:inverseOf :fam_hx_in_paternal_paternal_great_grandfather_belongs_to .

:has_fam_hx_in_paternal_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_uncle ;
    owl:inverseOf :fam_hx_in_paternal_uncle_belongs_to .

:has_fam_hx_in_step_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_sibling ;
    owl:inverseOf :fam_hx_in_step_brother_belongs_to .

:has_fam_hx_in_step_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_step_cousin_belongs_to .

:has_fam_hx_in_step_granddaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_grandchild ;
    owl:inverseOf :fam_hx_in_step_granddaughter_belongs_to .

:has_fam_hx_in_step_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_grandparent ;
    owl:inverseOf :fam_hx_in_step_grandfather_belongs_to .

:has_fam_hx_in_step_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_grandparent ;
    owl:inverseOf :fam_hx_in_step_grandmother_belongs_to .

:has_fam_hx_in_step_grandson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_grandchild ;
    owl:inverseOf :fam_hx_in_step_grandson_belongs_to .

:has_fam_hx_in_step_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_sibling ;
    owl:inverseOf :fam_hx_in_step_sister_belongs_to .

:has_fam_hx_in_stepdaughter a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_child ;
    owl:inverseOf :fam_hx_in_stepdaughter_belongs_to .

:has_fam_hx_in_stepfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_stepparent ;
    owl:inverseOf :fam_hx_in_stepfather_belongs_to .

:has_fam_hx_in_stepmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_stepparent ;
    owl:inverseOf :fam_hx_in_stepmother_belongs_to .

:has_fam_hx_in_stepson a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_child ;
    owl:inverseOf :fam_hx_in_stepson_belongs_to .

:has_female_fictive_kin a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_fictive_kin .

:has_female_partner a owl:ObjectProperty ;
    rdfs:comment "No Snomed CT term describes this concept. Includes wife, common-law wife, female significant other, girlfriend, female cohabitee, fiancee, female domestic partner"^^xsd:string ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_partner .

:has_foster_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_foster_family_member .

:has_foster_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_foster_family_member .

:has_foster_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_foster_family_member .

:has_foster_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_foster_family_member .

:has_foster_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_foster_family_member .

:has_fraternal_twin_brother a owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:subPropertyOf :has_twin_brother ;
    owl:inverseOf :has_fraternal_twin_brother .

:has_fraternal_twin_sister a owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:subPropertyOf :has_twin_sister ;
    owl:inverseOf :has_fraternal_twin_sister .

:has_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_granddaughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_grandchild .

:has_grandson a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_grandchild .

:has_great_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_great_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_half_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_identical_twin_brother a owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:domain :Person_Male ;
    rdfs:subPropertyOf :has_twin_brother ;
    owl:inverseOf :has_identical_twin_brother .

:has_identical_twin_sister a owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:domain :Person_Female ;
    rdfs:subPropertyOf :has_twin_sister ;
    owl:inverseOf :has_identical_twin_sister .

:has_male_fictive_kin a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_fictive_kin .

:has_male_partner a owl:ObjectProperty ;
    rdfs:comment "No Snomed CT term describes this concept. Includes husband, common-law husband, male significant other, boyfriend, male cohabitee, fiance, male domestic partner"^^xsd:string ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_partner .

:has_maternal_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_cousin .

:has_maternal_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandparent .

:has_maternal_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_half_aunt .

:has_maternal_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_half_uncle .

:has_maternal_maternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandaunt .

:has_maternal_maternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_granduncle .

:has_maternal_maternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandfather .

:has_maternal_paternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandaunt .

:has_maternal_paternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_granduncle .

:has_maternal_paternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandfather .

:has_natural_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_first_degree_relative .

:has_natural_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_first_degree_relative .

:has_organ_donor a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_family_member ;
    owl:inverseOf :has_organ_recipient .

:has_organ_recipient a owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:subPropertyOf :has_family_member ;
    owl:inverseOf :has_organ_donor .

:has_paternal_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_cousin .

:has_paternal_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandparent .

:has_paternal_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_half_aunt .

:has_paternal_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_half_uncle .

:has_paternal_maternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandaunt .

:has_paternal_maternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_granduncle .

:has_paternal_maternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandfather .

:has_paternal_paternal_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_grandaunt .

:has_paternal_paternal_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_granduncle .

:has_paternal_paternal_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_great_grandfather .

:has_step_child a owl:ObjectProperty ;
    rdfs:comment "step child is a two word phrase in snomed ct, rather than \"stepchild\""^^xsd:string ;
    rdfs:subPropertyOf :has_step_family_member .

:has_step_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_family_member .

:has_step_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_family_member .

:has_step_parent a owl:ObjectProperty ;
    rdfs:comment "step parent is a two word phrase is snomed ct, rather than \"stepparent\""^^xsd:string ;
    rdfs:subPropertyOf :has_step_family_member .

:has_step_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_step_family_member .

:has_twin_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_natural_brother .

:has_twin_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_natural_sister .

<winik/55> a :Person_Female ;
    :has_natural_father <winik/1> ;
    :has_natural_mother <winik/14> ;
    ns1:hasAge 7360 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "a" ;
    ns1:hasPartner <winik/62> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/62> a :Person_Male ;
    :has_natural_father <winik/3> ;
    :has_natural_mother <winik/16> ;
    ns1:hasAge 7304 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasPartner <winik/55> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/79> a :Person_Female ;
    :has_natural_father <winik/7> ;
    :has_natural_mother <winik/20> ;
    ns1:hasAge 7280 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/94> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/94> a :Person_Male ;
    :has_natural_father <winik/11> ;
    :has_natural_mother <winik/24> ;
    ns1:hasAge 7033 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasPartner <winik/79> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

:First_Degree_Relation a owl:Class ;
    rdfs:comment "Consistent with Snomed CT term First Degree Blood Relative"^^xsd:string,
        "Def: Any relative who is one meiosis away from a particular individual in a family (i.e., parent, sibling, offspring). Definition from GeneTests."^^xsd:string ;
    rdfs:subClassOf :Blood_Relation .

:Fraternal_Twin_Sibling a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Twin_Sibling ;
    owl:disjointWith :Identical_Twin_Sibling .

:Identical_Twin_Sibling a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Twin_Sibling ;
    owl:disjointWith :Fraternal_Twin_Sibling .

:Natural_Full_Sibling a owl:Class ;
    rdfs:comment "Consistent with Gene Tests definition of first degree relative, different than Snomed CT term Natural Sibling which is a parent term of natural half sibling."^^xsd:string ;
    rdfs:subClassOf :First_Degree_Relation .

:Twin_Brother a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Twin_Sister ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Natural_Brother :Twin_Sibling ) ] .

:Twin_Sister a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    owl:disjointWith :Twin_Brother ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Natural_Sister :Twin_Sibling ) ] .

:fam_hx_in_adoptive_child_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_child .

:fam_hx_in_adoptive_grandchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_grandchild .

:fam_hx_in_adoptive_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_grandparent .

:fam_hx_in_adoptive_parent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_parent .

:fam_hx_in_adoptive_sibling_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_adoptive_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_adoptive_sibling .

:fam_hx_in_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_aunt .

:fam_hx_in_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_cousin .

:fam_hx_in_fictive_kin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_fictive_kin .

:fam_hx_in_foster_child_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_child .

:fam_hx_in_foster_grandchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_grandchild .

:fam_hx_in_foster_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_grandparent .

:fam_hx_in_foster_parent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_parent .

:fam_hx_in_foster_sibling_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_foster_belongs_to ;
    owl:inverseOf :has_fam_hx_in_foster_sibling .

:fam_hx_in_grandchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandchild .

:fam_hx_in_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandparent .

:fam_hx_in_great_grandchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_grandchild .

:fam_hx_in_great_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_grandparent .

:fam_hx_in_half_aunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_aunt .

:fam_hx_in_half_sibling_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_sibling .

:fam_hx_in_half_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_half_uncle .

:fam_hx_in_maternal_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_cousin .

:fam_hx_in_maternal_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_maternal_grandparent .

:fam_hx_in_natural_child_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_first_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_child .

:fam_hx_in_natural_full_sibling_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_first_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_full_sibling .

:fam_hx_in_natural_parent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_first_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_natural_parent .

:fam_hx_in_partner_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_partner .

:fam_hx_in_paternal_cousin_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_cousin_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_cousin .

:fam_hx_in_paternal_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_paternal_grandparent .

:fam_hx_in_step_grandchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_grandchild .

:fam_hx_in_step_grandparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_grandparent .

:fam_hx_in_step_sibling_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_sibling .

:fam_hx_in_stepchild_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_step_child .

:fam_hx_in_stepparent_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_step_family_member_belongs_to ;
    owl:inverseOf :has_fam_hx_in_stepparent .

:fam_hx_in_twin_brother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_brother_belongs_to ;
    owl:inverseOf :has_fam_hx_in_twin_brother .

:fam_hx_in_twin_sister_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_natural_sister_belongs_to ;
    owl:inverseOf :has_fam_hx_in_twin_sister .

:fam_hx_in_uncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_second_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_uncle .

:has_blood_relative a owl:ObjectProperty ;
    rdfs:comment "\"blood relative\" is term used in snomed ct"^^xsd:string ;
    rdfs:subPropertyOf :has_family_member .

:has_fam_hx_in_adoptive_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_child_belongs_to .

:has_fam_hx_in_adoptive_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_grandchild_belongs_to .

:has_fam_hx_in_adoptive_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_grandparent_belongs_to .

:has_fam_hx_in_adoptive_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_parent_belongs_to .

:has_fam_hx_in_adoptive_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_adoptive_family_member ;
    owl:inverseOf :fam_hx_in_adoptive_sibling_belongs_to .

:has_fam_hx_in_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_aunt_belongs_to .

:has_fam_hx_in_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_cousin_belongs_to .

:has_fam_hx_in_fictive_kin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_fictive_kin_belongs_to .

:has_fam_hx_in_foster_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_family_member ;
    owl:inverseOf :fam_hx_in_foster_child_belongs_to .

:has_fam_hx_in_foster_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_family_member ;
    owl:inverseOf :fam_hx_in_foster_grandchild_belongs_to .

:has_fam_hx_in_foster_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_family_member ;
    owl:inverseOf :fam_hx_in_foster_grandparent_belongs_to .

:has_fam_hx_in_foster_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_family_member ;
    owl:inverseOf :fam_hx_in_foster_parent_belongs_to .

:has_fam_hx_in_foster_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_foster_family_member ;
    owl:inverseOf :fam_hx_in_foster_sibling_belongs_to .

:has_fam_hx_in_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_grandchild_belongs_to .

:has_fam_hx_in_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_grandparent_belongs_to .

:has_fam_hx_in_great_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_great_grandchild_belongs_to .

:has_fam_hx_in_great_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_great_grandparent_belongs_to .

:has_fam_hx_in_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_half_aunt_belongs_to .

:has_fam_hx_in_half_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_half_sibling_belongs_to .

:has_fam_hx_in_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_half_uncle_belongs_to .

:has_fam_hx_in_maternal_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_cousin ;
    owl:inverseOf :fam_hx_in_maternal_cousin_belongs_to .

:has_fam_hx_in_maternal_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandparent ;
    owl:inverseOf :fam_hx_in_maternal_grandparent_belongs_to .

:has_fam_hx_in_natural_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_full_sibling ;
    owl:inverseOf :fam_hx_in_natural_brother_belongs_to .

:has_fam_hx_in_natural_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_first_degree_relative ;
    owl:inverseOf :fam_hx_in_natural_child_belongs_to .

:has_fam_hx_in_natural_full_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_first_degree_relative ;
    owl:inverseOf :fam_hx_in_natural_full_sibling_belongs_to .

:has_fam_hx_in_natural_parent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_first_degree_relative ;
    owl:inverseOf :fam_hx_in_natural_parent_belongs_to .

:has_fam_hx_in_natural_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_full_sibling ;
    owl:inverseOf :fam_hx_in_natural_sister_belongs_to .

:has_fam_hx_in_partner a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_partner_belongs_to .

:has_fam_hx_in_paternal_cousin a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_cousin ;
    owl:inverseOf :fam_hx_in_paternal_cousin_belongs_to .

:has_fam_hx_in_paternal_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_grandparent ;
    owl:inverseOf :fam_hx_in_paternal_grandparent_belongs_to .

:has_fam_hx_in_step_child a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_stepchild_belongs_to .

:has_fam_hx_in_step_grandchild a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_step_grandchild_belongs_to .

:has_fam_hx_in_step_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_step_grandparent_belongs_to .

:has_fam_hx_in_step_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_step_sibling_belongs_to .

:has_fam_hx_in_stepparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_step_family_member ;
    owl:inverseOf :fam_hx_in_stepparent_belongs_to .

:has_fam_hx_in_twin_brother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_brother ;
    owl:inverseOf :fam_hx_in_twin_brother_belongs_to .

:has_fam_hx_in_twin_sister a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_natural_sister ;
    owl:inverseOf :fam_hx_in_twin_sister_belongs_to .

:has_fam_hx_in_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_second_degree_relative ;
    owl:inverseOf :fam_hx_in_uncle_belongs_to .

:has_first_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_blood_relative .

:has_grandnephew a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_grandniece a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_great_granddaughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_great_grandchild .

:has_great_grandson a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_great_grandchild .

:has_half_nephew a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_half_niece a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_maternal_female_cousin a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_maternal_cousin .

:has_maternal_male_cousin a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_maternal_cousin .

:has_nephew a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_niece a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_paternal_female_cousin a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_paternal_cousin .

:has_paternal_male_cousin a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_paternal_cousin .

<winik/113> a :Person_Female ;
    :has_natural_father <winik/29> ;
    :has_natural_mother <winik/42> ;
    ns1:hasAge 8091 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasPartner <winik/123> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/123> a :Person_Male ;
    :has_natural_father <winik/32> ;
    :has_natural_mother <winik/45> ;
    ns1:hasAge 8731 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/113> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/125> a :Person_Female ;
    :has_natural_father <winik/32> ;
    :has_natural_mother <winik/45> ;
    ns1:hasAge 7085 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/136> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/136> a :Person_Male ;
    :has_natural_father <winik/35> ;
    :has_natural_mother <winik/48> ;
    ns1:hasAge 7447 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasPartner <winik/125> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/54> a :Person_Female ;
    :has_natural_father <winik/1> ;
    :has_natural_mother <winik/14> ;
    ns1:hasAge 8006 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "a" ;
    ns1:hasPartner <winik/58> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/58> a :Person_Male ;
    :has_natural_father <winik/2> ;
    :has_natural_mother <winik/15> ;
    ns1:hasAge 8677 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasPartner <winik/54> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/67> a :Person_Female ;
    :has_natural_father <winik/4> ;
    :has_natural_mother <winik/17> ;
    ns1:hasAge 7800 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "d" ;
    ns1:hasPartner <winik/78> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/70> a :Person_Female ;
    :has_natural_father <winik/5> ;
    :has_natural_mother <winik/18> ;
    ns1:hasAge 7920 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasPartner <winik/85> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/73> a :Person_Female ;
    :has_natural_father <winik/6> ;
    :has_natural_mother <winik/19> ;
    ns1:hasAge 7987 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasPartner <winik/92> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/78> a :Person_Male ;
    :has_natural_father <winik/7> ;
    :has_natural_mother <winik/20> ;
    ns1:hasAge 8130 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/67> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/85> a :Person_Male ;
    :has_natural_father <winik/9> ;
    :has_natural_mother <winik/22> ;
    ns1:hasAge 8410 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/70> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/86> a :Person_Female ;
    :has_natural_father <winik/9> ;
    :has_natural_mother <winik/22> ;
    ns1:hasAge 8002 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/97> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/87> a :Person_Female ;
    :has_natural_father <winik/9> ;
    :has_natural_mother <winik/22> ;
    ns1:hasAge 7203 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/99> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/92> a :Person_Male ;
    :has_natural_father <winik/11> ;
    :has_natural_mother <winik/24> ;
    ns1:hasAge 8908 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasPartner <winik/73> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/97> a :Person_Male ;
    :has_natural_father <winik/12> ;
    :has_natural_mother <winik/25> ;
    ns1:hasAge 7309 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/86> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/99> a :Person_Male ;
    :has_natural_father <winik/12> ;
    :has_natural_mother <winik/25> ;
    ns1:hasAge 6269 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/87> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

:Grand_Aunt a owl:Class ;
    rdfs:subClassOf :Female_Blood_Relation,
        :Third_Degree_Relation .

:Grand_Uncle a owl:Class ;
    rdfs:subClassOf :Male_Blood_Relation,
        :Third_Degree_Relation .

:Great_Grandfather a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Great_Grandparent :Male_Blood_Relation ) ] .

:Great_Grandmother a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Blood_Relation :Great_Grandparent ) ] .

:Health_Risk_Behavior a owl:Class ;
    rdfs:comment "Similar to Snomed CT term Health-related behavior finding, but subclasses cannot be restricted to its children terms, which are too limited for this purpose. Use other UMLS terms as needed."^^xsd:string ;
    rdfs:subClassOf :Health_State ;
    owl:disjointWith :Diagnosis,
        :Sign_or_Symptom .

:Negative a owl:Class ;
    rdfs:subClassOf :Status ;
    owl:disjointWith :Positive,
        :Positive_but_Resolved,
        :Unknown .

:Parent_Relation a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Family_Relation .

:Positive a owl:Class ;
    rdfs:subClassOf :Status ;
    owl:disjointWith :Negative,
        :Positive_but_Resolved,
        :Unknown .

:Positive_but_Resolved a owl:Class ;
    rdfs:subClassOf :Status ;
    owl:disjointWith :Negative,
        :Positive,
        :Unknown .

:Sign_or_Symptom a owl:Class ;
    rdfs:comment "Consistent with Snomed CT term Symptoms, which is in turn consistent with ICD-9 Symptoms, signs and ill-defined conditions not elsewhere classfied and ICD-10 Symptoms, signs and abnormal clinical and laboratory findings not elsewhere classified. Subclasses to be drawn from child terms of the Snomed CT term as possible, noting that some child terms in Snomed CT are signs rather than symptoms, and that some symptoms appear elsewhere in Snomed CT (e.g. pain is in other Snomed CT hierarchies). Use other UMLS terms as needed."^^xsd:string ;
    rdfs:subClassOf :Health_State ;
    owl:disjointWith :Diagnosis,
        :Health_Risk_Behavior .

:Twin_Sibling a owl:Class ;
    rdfs:comment "Snomed CT term"^^xsd:string ;
    rdfs:subClassOf :Natural_Full_Sibling .

:Unknown a owl:Class ;
    rdfs:subClassOf :Status ;
    owl:disjointWith :Negative,
        :Positive,
        :Positive_but_Resolved .

:fam_hx_in_blood_relative_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_blood_relative .

:fam_hx_in_first_degree_relative_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_blood_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_first_degree_relative .

:has_aunt a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_fam_hx_in_blood_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_blood_relative_belongs_to .

:has_fam_hx_in_first_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_blood_relative ;
    owl:inverseOf :fam_hx_in_first_degree_relative_belongs_to .

:has_fictive_kin a owl:ObjectProperty ;
    rdfs:comment "concept does not exist in umls."^^xsd:string ;
    rdfs:subPropertyOf :has_family_member .

:has_grandparent a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_second_degree_relative .

:has_half_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_half_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_maternal_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_aunt .

:has_maternal_grandfather a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_maternal_grandparent .

:has_maternal_grandmother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_maternal_grandparent .

:has_maternal_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_uncle .

:has_natural_full_sibling a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_first_degree_relative .

:has_partner a owl:ObjectProperty ;
    rdfs:comment "consistent usage with Snomed ct term \"partner in relationship\".Subsumes spouse, girlfriend, boyfriend, significant other, common-law spouse, friend, cohabitee, fiancee, domestic partner"^^xsd:string ;
    rdfs:subPropertyOf :has_family_member .

:has_paternal_aunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_aunt .

:has_paternal_grandfather a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_paternal_grandparent .

:has_paternal_grandmother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_paternal_grandparent .

:has_paternal_uncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_uncle .

:has_uncle a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_second_degree_relative .

:n a swrl:Variable .

<winik/1> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16511 ;
    ns1:hasFamily <family/a> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "a" ;
    ns1:hasPartner <winik/14> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/10> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16519 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasPartner <winik/23> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/100> a :Person_Male ;
    :has_natural_father <winik/13> ;
    :has_natural_mother <winik/26> ;
    ns1:hasAge 9408 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasPartner <winik/84> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/101> a :Person_Female ;
    :has_natural_father <winik/13> ;
    :has_natural_mother <winik/26> ;
    ns1:hasAge 8482 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasPartner <winik/112> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/102> a :Person_Male ;
    :has_natural_father <winik/13> ;
    :has_natural_mother <winik/26> ;
    ns1:hasAge 7698 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasPartner <winik/90> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/105> a :Person_Female ;
    :has_natural_father <winik/27> ;
    :has_natural_mother <winik/40> ;
    ns1:hasAge 7663 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasPartner <winik/116> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/110> a :Person_Male ;
    :has_natural_father <winik/28> ;
    :has_natural_mother <winik/41> ;
    ns1:hasAge 8098 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/93> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/112> a :Person_Male ;
    :has_natural_father <winik/29> ;
    :has_natural_mother <winik/42> ;
    ns1:hasAge 9050 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasPartner <winik/101> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/116> a :Person_Male ;
    :has_natural_father <winik/30> ;
    :has_natural_mother <winik/43> ;
    ns1:hasAge 8959 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasPartner <winik/105> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/124> a :Person_Female ;
    :has_natural_father <winik/32> ;
    :has_natural_mother <winik/45> ;
    ns1:hasAge 7827 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/133> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/13> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16520 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "m" ;
    ns1:hasPartner <winik/26> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/131> a :Person_Female ;
    :has_natural_father <winik/34> ;
    :has_natural_mother <winik/47> ;
    ns1:hasAge 8819 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/141> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/133> a :Person_Male ;
    :has_natural_father <winik/34> ;
    :has_natural_mother <winik/47> ;
    ns1:hasAge 7217 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/124> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/135> a :Person_Female ;
    :has_natural_father <winik/35> ;
    :has_natural_mother <winik/48> ;
    ns1:hasAge 7960 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasPartner <winik/146> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/14> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16386 ;
    ns1:hasFamily <family/a> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "n" ;
    ns1:hasPartner <winik/1> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/141> a :Person_Male ;
    :has_natural_father <winik/36> ;
    :has_natural_mother <winik/49> ;
    ns1:hasAge 8975 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasPartner <winik/131> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/146> a :Person_Male ;
    :has_natural_father <winik/37> ;
    :has_natural_mother <winik/50> ;
    ns1:hasAge 8301 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasPartner <winik/135> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/17> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16420 ;
    ns1:hasFamily <family/d> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "q" ;
    ns1:hasPartner <winik/4> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/18> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16415 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "r" ;
    ns1:hasPartner <winik/5> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/21> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16423 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "u" ;
    ns1:hasPartner <winik/8> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/23> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16436 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "w" ;
    ns1:hasPartner <winik/10> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/26> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16461 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "z" ;
    ns1:hasPartner <winik/13> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/27> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16532 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasPartner <winik/40> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/29> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16577 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasPartner <winik/42> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/30> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16550 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasPartner <winik/43> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/33> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16541 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasPartner <winik/46> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/4> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16562 ;
    ns1:hasFamily <family/d> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "d" ;
    ns1:hasPartner <winik/17> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/40> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16468 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "N" ;
    ns1:hasPartner <winik/27> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/42> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16850 ;
    ns1:hasFamily <family/C> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "P" ;
    ns1:hasPartner <winik/29> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/43> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16591 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "Q" ;
    ns1:hasPartner <winik/30> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/46> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16660 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "T" ;
    ns1:hasPartner <winik/33> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/5> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16570 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasPartner <winik/18> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/59> a :Person_Female ;
    :has_natural_father <winik/2> ;
    :has_natural_mother <winik/15> ;
    ns1:hasAge 7949 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasPartner <winik/69> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/69> a :Person_Male ;
    :has_natural_father <winik/5> ;
    :has_natural_mother <winik/18> ;
    ns1:hasAge 8664 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasPartner <winik/59> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/8> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16538 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasPartner <winik/21> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/82> a :Person_Female ;
    :has_natural_father <winik/8> ;
    :has_natural_mother <winik/21> ;
    ns1:hasAge 8234 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasPartner <winik/96> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/84> a :Person_Female ;
    :has_natural_father <winik/9> ;
    :has_natural_mother <winik/22> ;
    ns1:hasAge 9011 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/100> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/90> a :Person_Female ;
    :has_natural_father <winik/10> ;
    :has_natural_mother <winik/23> ;
    ns1:hasAge 9094 ;
    ns1:hasFamily <family/m> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasPartner <winik/102> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/93> a :Person_Female ;
    :has_natural_father <winik/11> ;
    :has_natural_mother <winik/24> ;
    ns1:hasAge 7845 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasPartner <winik/110> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/96> a :Person_Male ;
    :has_natural_father <winik/12> ;
    :has_natural_mother <winik/25> ;
    ns1:hasAge 8408 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/82> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<family/M> a ns1:Family ;
    ns1:hasResource <resource/11>,
        <resource/12>,
        <resource/13>,
        <resource/14>,
        <resource/15> .

:Blood_Relation a owl:Class ;
    rdfs:comment "consistent with Snomed CT term Relative"^^xsd:string ;
    rdfs:subClassOf :Family_Relation .

:Female_Adopted_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adopted_Kin_Relation :Female_Relation ) ] .

:Female_Foster_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Female_Relation :Foster_Kin_Relation ) ] .

:Female_Step_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Step_Kin_Relation :Female_Relation ) ] .

:Male_Foster_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Male_Relation :Foster_Kin_Relation ) ] .

:Male_Step_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Step_Kin_Relation :Male_Relation ) ] .

:Status a owl:Class .

:fam_hx_in_grandaunt_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_grandaunt .

:fam_hx_in_granduncle_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_third_degree_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_granduncle .

:fam_hx_in_great_grandfather_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_grandfather .

:fam_hx_in_great_grandmother_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_great_grandparent_belongs_to ;
    owl:inverseOf :has_fam_hx_in_great_grandmother .

:has_fam_hx_in_grandaunt a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_grandaunt_belongs_to .

:has_fam_hx_in_granduncle a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_third_degree_relative ;
    owl:inverseOf :fam_hx_in_granduncle_belongs_to .

:has_fam_hx_in_great_grandfather a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandparent ;
    owl:inverseOf :fam_hx_in_great_grandfather_belongs_to .

:has_fam_hx_in_great_grandmother a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_great_grandparent ;
    owl:inverseOf :fam_hx_in_great_grandmother_belongs_to .

:has_foster_family_member a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_family_member .

:has_half_brother a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_half_sibling .

:has_half_sister a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_half_sibling .

<winik/104> a :Person_Female ;
    :has_natural_father <winik/27> ;
    :has_natural_mother <winik/40> ;
    ns1:hasAge 8774 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasPartner <winik/115> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/109> a :Person_Female ;
    :has_natural_father <winik/28> ;
    :has_natural_mother <winik/41> ;
    ns1:hasAge 8786 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/122> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/11> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16558 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasPartner <winik/24> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/115> a :Person_Male ;
    :has_natural_father <winik/30> ;
    :has_natural_mother <winik/43> ;
    ns1:hasAge 9880 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasPartner <winik/104> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/122> a :Person_Male ;
    :has_natural_father <winik/32> ;
    :has_natural_mother <winik/45> ;
    ns1:hasAge 9431 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/109> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/132> a :Person_Female ;
    :has_natural_father <winik/34> ;
    :has_natural_mother <winik/47> ;
    ns1:hasAge 8213 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/142> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/142> a :Person_Male ;
    :has_natural_father <winik/36> ;
    :has_natural_mother <winik/49> ;
    ns1:hasAge 8267 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasPartner <winik/132> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/145> a :Person_Female ;
    :has_natural_father <winik/37> ;
    :has_natural_mother <winik/50> ;
    ns1:hasAge 9124 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasPartner <winik/148> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/148> a :Person_Male ;
    :has_natural_father <winik/38> ;
    :has_natural_mother <winik/51> ;
    ns1:hasAge 9546 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasPartner <winik/145> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/149> a :Person_Male ;
    :has_natural_father <winik/38> ;
    :has_natural_mother <winik/51> ;
    ns1:hasAge 8705 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasPartner <winik/151> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/15> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16444 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "o" ;
    ns1:hasPartner <winik/2> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/151> a :Person_Female ;
    :has_natural_father <winik/39> ;
    :has_natural_mother <winik/52> ;
    ns1:hasAge 9001 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "M" ;
    ns1:hasPartner <winik/149> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/19> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16436 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "s" ;
    ns1:hasPartner <winik/6> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/2> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16562 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasPartner <winik/15> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/24> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16443 ;
    ns1:hasFamily <family/k> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "x" ;
    ns1:hasPartner <winik/11> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/31> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16480 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasPartner <winik/44> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/36> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16508 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasPartner <winik/49> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/37> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16491 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasPartner <winik/50> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/38> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16478 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasPartner <winik/51> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/39> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16504 ;
    ns1:hasFamily <family/M> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "M" ;
    ns1:hasPartner <winik/52> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/44> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16871 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "R" ;
    ns1:hasPartner <winik/31> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/49> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16666 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "W" ;
    ns1:hasPartner <winik/36> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/50> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16877 ;
    ns1:hasFamily <family/K> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "X" ;
    ns1:hasPartner <winik/37> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/51> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16470 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "Y" ;
    ns1:hasPartner <winik/38> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/52> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16526 ;
    ns1:hasFamily <family/M> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "Z" ;
    ns1:hasPartner <winik/39> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/53> a :Person_Female ;
    :has_natural_father <winik/1> ;
    :has_natural_mother <winik/14> ;
    ns1:hasAge 8883 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "a" ;
    ns1:hasPartner <winik/57> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/57> a :Person_Male ;
    :has_natural_father <winik/2> ;
    :has_natural_mother <winik/15> ;
    ns1:hasAge 9628 ;
    ns1:hasFamily <family/b> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasPartner <winik/53> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/6> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16562 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasPartner <winik/19> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/61> a :Person_Female ;
    :has_natural_father <winik/3> ;
    :has_natural_mother <winik/16> ;
    ns1:hasAge 8275 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasPartner <winik/68> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/65> a :Person_Female ;
    :has_natural_father <winik/4> ;
    :has_natural_mother <winik/17> ;
    ns1:hasAge 9288 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "d" ;
    ns1:hasPartner <winik/71> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/66> a :Person_Female ;
    :has_natural_father <winik/4> ;
    :has_natural_mother <winik/17> ;
    ns1:hasAge 8747 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "d" ;
    ns1:hasPartner <winik/72> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/68> a :Person_Male ;
    :has_natural_father <winik/5> ;
    :has_natural_mother <winik/18> ;
    ns1:hasAge 9497 ;
    ns1:hasFamily <family/e> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "e" ;
    ns1:hasPartner <winik/61> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/71> a :Person_Male ;
    :has_natural_father <winik/6> ;
    :has_natural_mother <winik/19> ;
    ns1:hasAge 9089 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasPartner <winik/65> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/72> a :Person_Male ;
    :has_natural_father <winik/6> ;
    :has_natural_mother <winik/19> ;
    ns1:hasAge 8478 ;
    ns1:hasFamily <family/f> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "f" ;
    ns1:hasPartner <winik/66> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/77> a :Person_Female ;
    :has_natural_father <winik/7> ;
    :has_natural_mother <winik/20> ;
    ns1:hasAge 8923 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/95> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/95> a :Person_Male ;
    :has_natural_father <winik/12> ;
    :has_natural_mother <winik/25> ;
    ns1:hasAge 9491 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/77> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<family/g> a ns1:Family ;
    ns1:hasResource <resource/101>,
        <resource/102>,
        <resource/103>,
        <resource/104>,
        <resource/105> .

:Male_Adopted_Relation a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adopted_Kin_Relation :Male_Relation ) ] .

:fam_hx_in_foster_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_foster_family_member .

:has_fam_hx_in_foster_family_member a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_foster_belongs_to .

:has_grandaunt a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_granduncle a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_third_degree_relative .

:has_great_grandfather a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_great_grandparent .

:has_great_grandmother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_great_grandparent .

:has_step_family_member a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_family_member .

:s a swrl:Variable .

<winik/103> a :Person_Male ;
    :has_natural_father <winik/27> ;
    :has_natural_mother <winik/40> ;
    ns1:hasAge 9626 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "A" ;
    ns1:hasPartner <winik/89> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/106> a :Person_Female ;
    :has_natural_father <winik/28> ;
    :has_natural_mother <winik/41> ;
    ns1:hasAge 10356 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/114> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/108> a :Person_Male ;
    :has_natural_father <winik/28> ;
    :has_natural_mother <winik/41> ;
    ns1:hasAge 9455 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/91> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/111> a :Person_Female ;
    :has_natural_father <winik/29> ;
    :has_natural_mother <winik/42> ;
    ns1:hasAge 9871 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "C" ;
    ns1:hasPartner <winik/121> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/114> a :Person_Male ;
    :has_natural_father <winik/30> ;
    :has_natural_mother <winik/43> ;
    ns1:hasAge 10302 ;
    ns1:hasFamily <family/D> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "D" ;
    ns1:hasPartner <winik/106> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/118> a :Person_Female ;
    :has_natural_father <winik/31> ;
    :has_natural_mother <winik/44> ;
    ns1:hasAge 10280 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasPartner <winik/134> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/119> a :Person_Female ;
    :has_natural_father <winik/31> ;
    :has_natural_mother <winik/44> ;
    ns1:hasAge 9709 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasPartner <winik/127> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/12> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16523 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "l" ;
    ns1:hasPartner <winik/25> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/121> a :Person_Male ;
    :has_natural_father <winik/32> ;
    :has_natural_mother <winik/45> ;
    ns1:hasAge 10413 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/111> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/126> a :Person_Female ;
    :has_natural_father <winik/33> ;
    :has_natural_mother <winik/46> ;
    ns1:hasAge 9379 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasPartner <winik/139> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/127> a :Person_Male ;
    :has_natural_father <winik/33> ;
    :has_natural_mother <winik/46> ;
    ns1:hasAge 8316 ;
    ns1:hasFamily <family/G> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "G" ;
    ns1:hasPartner <winik/119> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/134> a :Person_Male ;
    :has_natural_father <winik/35> ;
    :has_natural_mother <winik/48> ;
    ns1:hasAge 8822 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasPartner <winik/118> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/139> a :Person_Male ;
    :has_natural_father <winik/36> ;
    :has_natural_mother <winik/49> ;
    ns1:hasAge 10459 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasPartner <winik/126> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/16> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16464 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "p" ;
    ns1:hasPartner <winik/3> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/20> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16433 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "t" ;
    ns1:hasPartner <winik/7> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/22> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16476 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "v" ;
    ns1:hasPartner <winik/9> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/25> a :Person_Female ;
    :has_natural_father <winik/-3> ;
    :has_natural_mother <winik/-4> ;
    ns1:hasAge 16438 ;
    ns1:hasFamily <family/l> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "y" ;
    ns1:hasPartner <winik/12> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/28> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16573 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/41> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/3> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16573 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasPartner <winik/16> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/32> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16572 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "F" ;
    ns1:hasPartner <winik/45> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/34> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16565 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/47> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/35> a :Person_Male ;
    :has_natural_father <winik/-5> ;
    :has_natural_mother <winik/-6> ;
    ns1:hasAge 16523 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "I" ;
    ns1:hasPartner <winik/48> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/41> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16868 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "O" ;
    ns1:hasPartner <winik/28> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/45> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16752 ;
    ns1:hasFamily <family/F> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "S" ;
    ns1:hasPartner <winik/32> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/47> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16456 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "U" ;
    ns1:hasPartner <winik/34> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/48> a :Person_Female ;
    :has_natural_father <winik/-7> ;
    :has_natural_mother <winik/-8> ;
    ns1:hasAge 16426 ;
    ns1:hasFamily <family/I> ;
    ns1:hasFirstName "my" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "V" ;
    ns1:hasPartner <winik/35> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/56> a :Person_Female ;
    :has_natural_father <winik/2> ;
    :has_natural_mother <winik/15> ;
    ns1:hasAge 10080 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "b" ;
    ns1:hasPartner <winik/60> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/60> a :Person_Male ;
    :has_natural_father <winik/3> ;
    :has_natural_mother <winik/16> ;
    ns1:hasAge 9088 ;
    ns1:hasFamily <family/c> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "c" ;
    ns1:hasPartner <winik/56> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/7> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16490 ;
    ns1:hasFamily <family/g> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/20> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/75> a :Person_Female ;
    :has_natural_father <winik/7> ;
    :has_natural_mother <winik/20> ;
    ns1:hasAge 10428 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/80> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/76> a :Person_Female ;
    :has_natural_father <winik/7> ;
    :has_natural_mother <winik/20> ;
    ns1:hasAge 9573 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "g" ;
    ns1:hasPartner <winik/83> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/80> a :Person_Male ;
    :has_natural_father <winik/8> ;
    :has_natural_mother <winik/21> ;
    ns1:hasAge 9984 ;
    ns1:hasFamily <family/h> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasPartner <winik/75> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/81> a :Person_Female ;
    :has_natural_father <winik/8> ;
    :has_natural_mother <winik/21> ;
    ns1:hasAge 9222 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "h" ;
    ns1:hasPartner <winik/88> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/83> a :Person_Male ;
    :has_natural_father <winik/9> ;
    :has_natural_mother <winik/22> ;
    ns1:hasAge 9757 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/76> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/88> a :Person_Male ;
    :has_natural_father <winik/10> ;
    :has_natural_mother <winik/23> ;
    ns1:hasAge 10437 ;
    ns1:hasFamily <family/j> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasPartner <winik/81> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/89> a :Person_Female ;
    :has_natural_father <winik/10> ;
    :has_natural_mother <winik/23> ;
    ns1:hasAge 9772 ;
    ns1:hasFamily <family/A> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "j" ;
    ns1:hasPartner <winik/103> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/9> a :Person_Male ;
    :has_natural_father <winik/-1> ;
    :has_natural_mother <winik/-2> ;
    ns1:hasAge 16539 ;
    ns1:hasFamily <family/i> ;
    ns1:hasFirstName "jx" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "i" ;
    ns1:hasPartner <winik/22> ;
    ns1:hasProfession "forager" ;
    ns1:isAlive true .

<winik/91> a :Person_Female ;
    :has_natural_father <winik/11> ;
    :has_natural_mother <winik/24> ;
    ns1:hasAge 9698 ;
    ns1:hasFamily <family/B> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "k" ;
    ns1:hasPartner <winik/108> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<family/C> a ns1:Family ;
    ns1:hasResource <resource/66>,
        <resource/67>,
        <resource/68>,
        <resource/69>,
        <resource/70> .

:Foster_Kin_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:Second_Degree_Relation a owl:Class ;
    rdfs:comment "Any relative who is two meioses away from a particular individual in a pedigree; a relative with whom one quarter of an individual's genes is shared (i.e., grandparent, grandchild, uncle, aunt, nephew, niece, half-sibling). Definition from GeneTests."^^xsd:string ;
    rdfs:subClassOf :Blood_Relation .

:Third_Degree_Relation a owl:Class ;
    rdfs:subClassOf :Blood_Relation .

:fam_hx_in_step_family_member_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_step_family_member .

:has_adoptive_family_member a owl:ObjectProperty ;
    rdfs:comment "adoptive is term used in snomed ct"^^xsd:string ;
    rdfs:subPropertyOf :has_family_member .

:has_fam_hx_in_step_family_member a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_step_family_member_belongs_to .

:has_natural_daughter a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_natural_child .

:has_natural_son a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_natural_child .

:has_second_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_blood_relative .

<winik/107> a :Person_Female ;
    :has_natural_father <winik/28> ;
    :has_natural_mother <winik/41> ;
    ns1:hasAge 9927 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "B" ;
    ns1:hasPartner <winik/120> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/117> a :Person_Female ;
    :has_natural_father <winik/31> ;
    :has_natural_mother <winik/44> ;
    ns1:hasAge 10806 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasPartner <winik/130> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/120> a :Person_Male ;
    :has_natural_father <winik/31> ;
    :has_natural_mother <winik/44> ;
    ns1:hasAge 8724 ;
    ns1:hasFamily <family/E> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "E" ;
    ns1:hasPartner <winik/107> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/129> a :Person_Female ;
    :has_natural_father <winik/34> ;
    :has_natural_mother <winik/47> ;
    ns1:hasAge 10582 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/140> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/130> a :Person_Male ;
    :has_natural_father <winik/34> ;
    :has_natural_mother <winik/47> ;
    ns1:hasAge 9750 ;
    ns1:hasFamily <family/H> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "H" ;
    ns1:hasPartner <winik/117> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/140> a :Person_Male ;
    :has_natural_father <winik/36> ;
    :has_natural_mother <winik/49> ;
    ns1:hasAge 9421 ;
    ns1:hasFamily <family/J> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "J" ;
    ns1:hasPartner <winik/129> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<winik/144> a :Person_Female ;
    :has_natural_father <winik/37> ;
    :has_natural_mother <winik/50> ;
    ns1:hasAge 9879 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "F" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "K" ;
    ns1:hasPartner <winik/147> ;
    ns1:hasProfession "farmer" ;
    ns1:isAlive true .

<winik/147> a :Person_Male ;
    :has_natural_father <winik/38> ;
    :has_natural_mother <winik/51> ;
    ns1:hasAge 10336 ;
    ns1:hasFamily <family/L> ;
    ns1:hasFirstName "bb" ;
    ns1:hasGender "M" ;
    ns1:hasHealth 100 ;
    ns1:hasLastName "L" ;
    ns1:hasPartner <winik/144> ;
    ns1:hasProfession "fisher" ;
    ns1:isAlive true .

<family/K> a ns1:Family ;
    ns1:hasResource <resource/121>,
        <resource/122>,
        <resource/123>,
        <resource/124>,
        <resource/125> .

:Adopted_Kin_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:Step_Kin_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation .

:fam_hx_in_adoptive_family_member_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_state_belongs_to_whom ;
    owl:inverseOf :has_fam_hx_in_adoptive_family_member .

:fam_hx_in_second_degree_relative_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_blood_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_second_degree_relative .

:has_fam_hx_in_adoptive_family_member a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_state ;
    owl:inverseOf :fam_hx_in_adoptive_family_member_belongs_to .

:has_fam_hx_in_second_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_blood_relative ;
    owl:inverseOf :fam_hx_in_second_degree_relative_belongs_to .

:has_family_member a owl:ObjectProperty ;
    rdfs:comment "Closest Snomed CT term is \"person in the family\".  UMLS CUI C0086282 \"family member\" is consistent with the concept represented by this property."^^xsd:string ;
    rdfs:domain :Person ;
    rdfs:range :Person .

<family/A> a ns1:Family ;
    ns1:hasResource <resource/10>,
        <resource/6>,
        <resource/7>,
        <resource/8>,
        <resource/9> .

<family/h> a ns1:Family ;
    ns1:hasResource <resource/86>,
        <resource/87>,
        <resource/88>,
        <resource/89>,
        <resource/90> .

<family/j> a ns1:Family ;
    ns1:hasResource <resource/1>,
        <resource/2>,
        <resource/3>,
        <resource/4>,
        <resource/5> .

<family/k> a ns1:Family ;
    ns1:hasResource <resource/91>,
        <resource/92>,
        <resource/93>,
        <resource/94>,
        <resource/95> .

:fam_hx_state_belongs_to_whom a owl:ObjectProperty ;
    rdfs:domain :Health_State ;
    rdfs:range :Person ;
    owl:inverseOf :has_fam_hx_state .

:has_fam_hx_state a owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range :Health_State ;
    owl:inverseOf :fam_hx_state_belongs_to_whom .

<family/E> a ns1:Family ;
    ns1:hasResource <resource/56>,
        <resource/57>,
        <resource/58>,
        <resource/59>,
        <resource/60> .

:has_natural_brother a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_natural_full_sibling .

:has_natural_sister a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_natural_full_sibling .

<family/G> a ns1:Family ;
    ns1:hasResource <resource/81>,
        <resource/82>,
        <resource/83>,
        <resource/84>,
        <resource/85> .

:Age_Range a owl:Class .

:Family_Relation a owl:Class ;
    rdfs:comment ""^^xsd:string .

:has_third_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_blood_relative .

<family/b> a ns1:Family ;
    ns1:hasResource <resource/21>,
        <resource/22>,
        <resource/23>,
        <resource/24>,
        <resource/25> .

<family/m> a ns1:Family ;
    ns1:hasResource <resource/126>,
        <resource/127>,
        <resource/128>,
        <resource/129>,
        <resource/130> .

:Health_State a owl:Class .

:fam_hx_in_third_degree_relative_belongs_to a owl:ObjectProperty ;
    rdfs:subPropertyOf :fam_hx_in_blood_relative_belongs_to ;
    owl:inverseOf :has_fam_hx_in_third_degree_relative .

:has_fam_hx_in_third_degree_relative a owl:ObjectProperty ;
    rdfs:subPropertyOf :has_fam_hx_in_blood_relative ;
    owl:inverseOf :fam_hx_in_third_degree_relative_belongs_to .

<family/c> a ns1:Family ;
    ns1:hasResource <resource/76>,
        <resource/77>,
        <resource/78>,
        <resource/79>,
        <resource/80> .

<family/e> a ns1:Family ;
    ns1:hasResource <resource/106>,
        <resource/107>,
        <resource/108>,
        <resource/109>,
        <resource/110> .

<family/i> a ns1:Family ;
    ns1:hasResource <resource/41>,
        <resource/42>,
        <resource/43>,
        <resource/44>,
        <resource/45> .

<family/B> a ns1:Family ;
    ns1:hasResource <resource/51>,
        <resource/52>,
        <resource/53>,
        <resource/54>,
        <resource/55> .

:Female_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation ;
    owl:disjointWith :Male_Relation .

:Male_Relation a owl:Class ;
    rdfs:subClassOf :Family_Relation ;
    owl:disjointWith :Female_Relation .

:Person a owl:Class .

<family/H> a ns1:Family ;
    ns1:hasResource <resource/71>,
        <resource/72>,
        <resource/73>,
        <resource/74>,
        <resource/75> .

<family/I> a ns1:Family ;
    ns1:hasResource <resource/116>,
        <resource/117>,
        <resource/118>,
        <resource/119>,
        <resource/120> .

:Female_Blood_Relation a owl:Class ;
    owl:disjointWith :Male_Blood_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Blood_Relation :Female_Relation ) ] ;
    owl:versionInfo "TODO: define this class?"^^xsd:string .

:Male_Blood_Relation a owl:Class ;
    owl:disjointWith :Female_Blood_Relation ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Blood_Relation :Male_Relation ) ] ;
    owl:versionInfo "TODO: define this class?"^^xsd:string .

<family/f> a ns1:Family ;
    ns1:hasResource <resource/61>,
        <resource/62>,
        <resource/63>,
        <resource/64>,
        <resource/65> .

:m a swrl:Variable .

<family/F> a ns1:Family ;
    ns1:hasResource <resource/26>,
        <resource/27>,
        <resource/28>,
        <resource/29>,
        <resource/30> .

<family/D> a ns1:Family ;
    ns1:hasResource <resource/111>,
        <resource/112>,
        <resource/113>,
        <resource/114>,
        <resource/115> .

:d a swrl:Variable .

:f a swrl:Variable .

<family/l> a ns1:Family ;
    ns1:hasResource <resource/31>,
        <resource/32>,
        <resource/33>,
        <resource/34>,
        <resource/35> .

<family/L> a ns1:Family ;
    ns1:hasResource <resource/46>,
        <resource/47>,
        <resource/48>,
        <resource/49>,
        <resource/50> .

<family/J> a ns1:Family ;
    ns1:hasResource <resource/36>,
        <resource/37>,
        <resource/38>,
        <resource/39>,
        <resource/40> .

:has_natural_father a owl:ObjectProperty ;
    rdfs:range :Person_Male ;
    rdfs:subPropertyOf :has_natural_parent .

:has_natural_mother a owl:ObjectProperty ;
    rdfs:range :Person_Female ;
    rdfs:subPropertyOf :has_natural_parent .

:Diagnosis a owl:Class ;
    rdfs:comment "Subclasses to be drawn from Snomed CT Clinical Findings"^^xsd:string ;
    rdfs:subClassOf :Health_State ;
    owl:disjointWith :Health_Risk_Behavior,
        :Sign_or_Symptom .

:has_health_state a owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range :Health_State ;
    owl:inverseOf :health_state_belongs_to_whom .

:Person_Male a owl:Class ;
    rdfs:subClassOf :Person ;
    owl:disjointWith :Person_Female .

:Person_Female a owl:Class ;
    rdfs:subClassOf :Person ;
    owl:disjointWith :Person_Male .

:c a swrl:Variable .

:b a swrl:Variable .

:a a swrl:Variable .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:AllDifferent .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

[] a owl:DataRange ;
    owl:oneOf ( "positive"^^xsd:string "negative"^^xsd:string "unknown"^^xsd:string ) .

